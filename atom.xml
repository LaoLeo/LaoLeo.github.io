<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Unity游戏开发</title>
  <subtitle>“Work Smarter”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laoleo.github.io/"/>
  <updated>2023-01-18T07:22:33.966Z</updated>
  <id>https://laoleo.github.io/</id>
  
  <author>
    <name>Walking 劳翼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UnityWebGL微信小游戏适配和优化</title>
    <link href="https://laoleo.github.io/2023/01/18/UnityWebGL%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%82%E9%85%8D%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://laoleo.github.io/2023/01/18/UnityWebGL微信小游戏适配和优化/</id>
    <published>2023-01-17T16:00:00.000Z</published>
    <updated>2023-01-18T07:22:33.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信提供Unity WebGL Transfer工具，将Unity游戏转换发布到小游戏平台。</p>
<span id="more"></span>
<h2 id="测试情况"><a href="#测试情况" class="headerlink" title="测试情况"></a>测试情况</h2><p>**1.小游戏平台标识 **</p>
<p>Lua和C#代码要判断小游戏平台来做适配，需要自定义微信小游戏平台标识，单单webgl平台标识不能判断是不是运行在微信小游戏上。</p>
<p>在小游戏打包时候添加symbol预编译宏。</p>
<p><strong>2.video播放</strong></p>
<p>游戏中资源加载之后播放video，在小游戏环境中会报错：video.canPlayType is not a function.</p>
<p>网上又解决方案，C#调wx js代码播放video，<a target="_blank" rel="noopener" href="https://blog.csdn.net/u013032852/article/details/119605522?spm=1001.2014.3001.5501" title="链接">链接</a>。</p>
<p>**3.Input 输入 **</p>
<p>输入框适配微信，不然捕获不到键盘输入，需要适配，看<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/InputAdaptation.md" title="连接">连接</a>。</p>
<p><strong>4.Touch事件和多点触控检验</strong></p>
<ul>
<li><em>请将WXTouchInputOverride.cs附加到EventSystem对象上，已测试EasyTouch、UGUI、FairGUI可正常工作</em>&#x20;</li>
<li><em>NGUI、FairGUI等UI组件内部实现(如NGUI的UICamera.cs)判断touch id&lt;0逻辑分支需删除；在iOS高性能模式下，id可为负数。</em></li>
</ul>
<p><strong>5.音频</strong></p>
<p>WebGL底层是利用WebAudio适配，所以Fmod的能力不能完全利用。</p>
<p><em>目前音频播放存在占用内存大、播放声音噪声大不稳定的问题</em></p>
<p><strong>6.文件存储</strong></p>
<p>WebGL将文件存储存储进IndexDB，但是小游戏不支持，需要使用WX C# SDK适配。</p>
<p>参考：WebGL微信小游戏转换-<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/DevelopmentQAList.md" title="技术常见问题QA">技术常见问题QA</a></p>
<h2 id="优化记录"><a href="#优化记录" class="headerlink" title="优化记录"></a>优化记录</h2><table>
<thead>
<tr>
<th>优化目标</th>
<th>优化项</th>
<th></th>
<th>优化建议</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动速度&#xA;&#xA;<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/StartupOptimization.md" title="参考">参考</a></td>
<td>内存</td>
<td>剔除不必要插件，减少代码包体</td>
<td>1.剔除MSDK等三方库代码&#xA;&#xA;2.代码剥离级别改为Medium，或者改为high加Link.xml文件修正，<a target="_blank" rel="noopener" href="https://docs.unity.cn/cn/2019.4/Manual/ManagedCodeStripping.html" title="参考">参考</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td>使用代码分包工具缩减WebAssembly首次下载包体，<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/WasmSplit.md#概述" title="代码分包">代码分包</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td>网络</td>
<td>资源CDN加速，开启Brotli或gzip压缩首包data文件</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>将进入到登录页面前需要加载的资源放到小程序预加载中去</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>资源请求并发数提升至20个，但是不能超过20</td>
<td></td>
</tr>
<tr>
<td>内存</td>
<td>纹理</td>
<td>贴图maxsize尽量不超过1024，小游戏环境适当降低画质</td>
<td>PJGTextureImportChecker脚本上加上webgl平台贴图的设置&#xA;&#xA;*   bigbg允许maxsize为2048（因为测试发现质量和压缩率友好），其他的纹理1024&#xA;*   2020版纹理格式使用DXT1和DXT5，详细参考本文纹理压缩</td>
</tr>
<tr>
<td></td>
<td></td>
<td>贴图尽量不生成Mipmap</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>贴图尽量不使用可写属性</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>选择压缩率较好的格式和maxsize</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>字体纹理压缩前最大不超过4MB</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>发布前使用压缩纹理工具进行优化</td>
<td>小游戏压缩纹理工具可以将纹理资源从ab中分离出来，将资源指针替换至原来ab内，分离出来的资源将被处理成多种不同GPU所支持的纹理格式托管至CDN中，小游戏底层会劫持渲染时根据资源指针和当前GPU支持的纹理格式来进行远程加载，以此来达到成功加载立即上传至GPU后释放和节省系统内存的目的。参考<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/CompressedTexture.md" title="微信小游戏压缩纹理工具">微信小游戏压缩纹理工具</a>&#xA;&#xA;Unity 2020.3.34使用这个工具有问题，微信方建议最好使用Unity2021.2.5版本</td>
</tr>
<tr>
<td></td>
<td>AB</td>
<td>AssetBundle</td>
<td>小游戏底层会对bundle做缓存，需要关闭cache。WebGL上也不建议使用带cache的API，不然ab文件除了会存入浏览器的IndexDB外，还会存入内存中的UnityCache</td>
</tr>
<tr>
<td></td>
<td>音频</td>
<td>优化Fmod bank，使用微信音频接口</td>
<td>*   webgl对Fmod提供了音频基础性的支持，unity底层利用内部web audio api实现这点&#xA;*   支持音频回放和混音&#xA;*   2021版之前不支持音频压缩，占用内存大&#xA;*   目前fmod音频播放沙沙声原因未知？？内存太大？还是某些功能未实现？？？？？&#xA;*   微信方建议使用他们的SDK接口<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/AudioOptimization.md" title="适配播放音频">适配播放音频</a></td>
</tr>
<tr>
<td>减低CPU消耗</td>
<td></td>
<td>iOS使用高性能模式</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>尽量使用Android CPU Profiler在小游戏真机环境Profie计算瓶颈</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>提前在Unity环境使用Unity Profiler发现问题</td>
</tr>
</tbody>
</table>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>浏览器WebGL内存结构</p>
<p><img src="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/raw/main/image/optimizationMemory1.png" alt=""></p>
<p>微信小程序WebGL内存结构</p>
<p><img src="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/raw/main/image/optimizationMemory10.png" alt=""></p>
<p>小程序基础库+Canvas：小程序webgl运行的底层支持</p>
<p>WASM编译：WASM是webassembly二进制代码（包括引擎、业务、第三方插件代码），运行时需进行编译执行，会产生大量内存占用（30M wasm code会产生300M编译内存）。</p>
<p>UnityHeap：就是编译执行wasm代码后的内存，UnityHeap = max(托管/Mono内存) + max(Native/Reserved内存 + 三方库C原生代码内存)</p>
<p>建议内存峰值控制范围：</p>
<ol>
<li>Android: 低档机 &lt; 1.2G, 中高档机 &lt; 1.5G</li>
<li>iOS: 低档机 &lt; 1G, 中高档机 &lt; 1.4G（ios低档机为iPhone 6sp/7/8等内存2G机型，中高档机为iPhone7p/8p/X/11等内存3G或以上机型）</li>
</ol>
<p>以iOS高性能模式为例，一款代码(导出目录/webgl/Build/xxx.code.unityweb或code.wasm)大小为30MB的游戏占用内存为：</p>
<p>小游戏基础库(130MB) + Cavnas(70MB) + 编译内存(300MB) + UnityHeap + Gfx显存 + 音频 + JavaScript(通常&lt;100MB)。</p>
<p>所以假如是低端机，内存控制在1G以内，那么业务侧（UnityHeap，Gfx显存，音频，JavaScript）需控制在500MB左右。</p>
<p>参考<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/OptimizationMemory.md" title="优化Unity WebGL的内存">优化Unity WebGL的内存</a></p>
<h3 id="当前内存占用"><a href="#当前内存占用" class="headerlink" title="当前内存占用"></a>当前内存占用</h3><p>使用<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/UsingMemoryProfiler.md" title="profilingMemory分析">profilingMemory分析</a>当前内存，测试机三星GS 8,。</p>
<p>使用微信的教程插入c代码忽略统计Lua内存，开启了profilingMemory后，真机和模拟器发现太卡了，帧率都掉到了个位数，浏览器访问速度正常。下面测试进入到主场景的情况：</p>
<p>真机和模拟器（两者内存占用基本一样）:</p>
<img src="/2023/01/18/UnityWebGL%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%82%E9%85%8D%E5%92%8C%E4%BC%98%E5%8C%96/image_vsb8Mwojo2.png" class="">
<p>浏览器：</p>
<img src="/2023/01/18/UnityWebGL%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%82%E9%85%8D%E5%92%8C%E4%BC%98%E5%8C%96/image_X3PZ1buk4d.png" class="">
<p>Unity Profiler：</p>
<img src="/2023/01/18/UnityWebGL%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%82%E9%85%8D%E5%92%8C%E4%BC%98%E5%8C%96/image_D4d4TQAzTI.png" class="">
<p>分析：</p>
<ul>
<li>真机、模拟器、浏览器的内存使用情况差不多，毕竟使用同一份资源</li>
<li>UsedHeapMemory 191是UnityHeap的真实使用量，MonoHeapUsed 164，那么剩下的native used+三方库为27，对这个结果很是疑惑。</li>
<li>贴图使用38.4，比较可信，但是audio才2.8KB，可能需要使用Unity InstantGame版本增强的Profiler功能才行</li>
</ul>
<h3 id="纹理压缩"><a href="#纹理压缩" class="headerlink" title="纹理压缩"></a>纹理压缩</h3><p>WebGL的支持的纹理压缩格式受Unity版本的影响，测试的版本是<strong>Unity 2020.3.34f1</strong>。查阅Unity Docs 2020–<a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2020.3/Manual/class-TextureImporterOverride.html" title="Recommended, default, and supported texture formats, by platform">Recommended, default, and supported texture formats, by platform</a></p>
<p>，简单总结支持格式，测试如下：</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>支持</th>
<th>测试</th>
</tr>
</thead>
<tbody>
<tr>
<td>RGB16/24</td>
<td>是</td>
<td>正常显示</td>
</tr>
<tr>
<td>RGBA16/32</td>
<td>是</td>
<td>正常显示</td>
</tr>
<tr>
<td>DXT1、DXT5</td>
<td>部分</td>
<td>正常显示</td>
</tr>
<tr>
<td>ETC、ETC2 4/8 bits</td>
<td>不</td>
<td>显示异常</td>
</tr>
<tr>
<td>ASTC</td>
<td>不</td>
<td>–</td>
</tr>
</tbody>
</table>
<p>注意，在<a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2021.3/Manual/class-TextureImporterOverride.html" title="2021.3文档">2021.3文档</a>里，DXT格式不支持，但ECT会被支持，ASTC在IOS13，Android10上被支持。</p>
<p>关于小游戏压缩纹理工具，在2020,3.34上压缩提取纹理ab会报错，不支持使用，这点微信方给出两点建议：</p>
<ul>
<li>切换到微信方验证过的对应Unity大年份版本的小版本打ab后再使用工具压缩提取纹理，如：2020.3.10f1c1。看考<a target="_blank" rel="noopener" href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform/blob/main/Design/CompressedTexture.md" title="这里">这里</a>。</li>
<li>换微信方与Unity合作改进的Unity版本，改进的版本Unity支持了ASTC。</li>
</ul>
<p>多次测试后，Unity2020.3.34上纹理格式选择总结：</p>
<ul>
<li>无Alpha信息纹理使用DTX1，有Alpha信息使用DXT5，DXT格式的压缩率比较优。</li>
<li>Crunched DXT格式压缩率比DXT更低，压缩质量调到最大100，大小还是比DXT1小，是DXT1的一半以下。关于Crunched压缩概念参考<a target="_blank" rel="noopener" href="https://docs.unity3d.com/Manual/texture-compression-formats.html" title="这里">这里</a></li>
<li>Crunched DXT格式纹理质量对比，质量100的Crunched DXT1只是略微比DXT1差了一点。</li>
</ul>
<p>以下是在三星galaxy s8下的测试对比，分辨率为2220x1080，以第一时间出现的UI背景图为例：</p>
<img src="/2023/01/18/UnityWebGL%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%82%E9%85%8D%E5%92%8C%E4%BC%98%E5%8C%96/image_6o3iFkTI7o.png" class="">
<p>观察发现：</p>
<ul>
<li>RGB24质量最高</li>
<li>DXT1与Crunched DXT1 quality 100的质量非常接近，只是微小的差别，手机上很难看出来</li>
<li>Crunched DXT1 quality 50质量最差，与DXT1相比有肉眼可见的差别</li>
</ul>
<p>PC上的微信小程序贴图格式会选择用DXT，移动端首选ETC和ASTC，ASTC优于ETC。DXT格式用在移动端上解压速度不如ETC。</p>
<p>看看不同贴图格式对AB大小的影响，对比如下：</p>
<ul>
<li>未设置格式，使用默认格式RGB24和RGBA32，ab包大小11G左右</li>
<li>设置DXT1和DXT5格式和maxsize后，3.68G</li>
<li>将DXT1和DXT5换成Crunched格式，质量调到Best100，3.05G</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微信提供Unity WebGL Transfer工具，将Unity游戏转换发布到小游戏平台。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="平台" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/WebGL/"/>
    
    
      <category term="小游戏" scheme="https://laoleo.github.io/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>食物语兼容打包编译到WebGL</title>
    <link href="https://laoleo.github.io/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/"/>
    <id>https://laoleo.github.io/2023/01/16/食物语兼容打包编译到WebGL/</id>
    <published>2023-01-15T16:00:00.000Z</published>
    <updated>2023-01-18T07:21:26.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Unity使用WebAssembly(wasm)技术将引擎代码和业务代码编译到WebGL平台上解析运行，截止目前2023年，PC浏览器对webgl的支持也越来越兼容普及，并且wasm具有可移植、体积小、加载快等特点，应用运行能接近原生的体验。</p>
<p>为应对项目组拓展海外市场的发展战略，因为海外用户使用PC玩游戏比较多，所以先预研一下发布WebGL平台的整体流程。</p>
<p>这里使用已经上线的项目——食物语来实践，这样遇到的问题比较有代表性。</p>
<blockquote>
<p>顺便打下广告，食物语是一项集中华传统美食文明和二次元风格于一体的女性向养成卡牌游戏，对美食和二次元感兴趣的同学，非常有必要下载玩玩~~</p>
</blockquote>
<span id="more"></span>
<h2 id="总体方向"><a href="#总体方向" class="headerlink" title="总体方向"></a>总体方向</h2><table>
<thead>
<tr>
<th>代码模块</th>
<th>库模块</th>
<th>兼容情况</th>
<th>完成情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>ao框架</td>
<td>日志</td>
<td><a target="_blank" rel="noopener" href="http://wiki.info/pages/viewpage.action?pageId=139784050" title="日志方案">日志方案</a></td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>网络</td>
<td><a target="_blank" rel="noopener" href="http://wiki.info/pages/viewpage.action?pageId=139769721" title="使用websocket">使用websocket</a></td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>ToLua</td>
<td>步骤7</td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>资源加载</td>
<td>步骤20</td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>资源打包</td>
<td>步骤5、6</td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>热更新</td>
<td></td>
<td>⭕</td>
</tr>
<tr>
<td></td>
<td>Bugly</td>
<td></td>
<td>⭕</td>
</tr>
<tr>
<td>三方库</td>
<td>Spine</td>
<td>支持</td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>Live2D</td>
<td>支持</td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>Fmod</td>
<td>步骤21</td>
<td>✔</td>
</tr>
<tr>
<td></td>
<td>Msdk</td>
<td>跳过</td>
<td>✔</td>
</tr>
</tbody>
</table>
<h2 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h2><p>1.移除（剪切到别的目录）AltasSource、GameAssets资源目录，移除ThridParty三方库以及一切业务相关代码，只剩aounity框架相关代码。</p>
<p>2.切换WebGL目标平台</p>
<p>3.编译，解决编译报错</p>
<ul>
<li>注释打包相关的LocalBundleStrategy类</li>
<li>注释LocalExportLuaSetting类，将C#类转为Lua类的工具类</li>
<li>AssetBundleBuilder调用了上层的类RemoveEmptyDirectory</li>
<li>BuglyAgent没有适配webgl平台，空引用报错</li>
<li>LuaBinder和DelegateFactoryUtil使用了反射</li>
</ul>
<p>4.先跑通执行Lua代码，Editor没问题，打包需要解决打包Lua ab问题</p>
<p>5.强打，只打Lua ab，可以正常打出ab，但是web上下载解压有报错。</p>
<p>6.WebGL上不支持解压ab LZMA压缩格式，可以是LZ4，打包选项上得添加ChunkBasedCompression，不然默认打包压缩格式是LZMA。</p>
<p>7.报错dlopen加载库错误、加载tolua DLL错误。这是因为webgl上允许使用动态链接库，Lua相关的库需要通过静态引用C源码的方式，打包时一起编译到webAssembly中。</p>
<p>参考文章<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/486826570" title="Unity WebGL ToLua">Unity WebGL ToLua</a>，文章里的webgl plugins缺少项目中用到的库，得到<a target="_blank" rel="noopener" href="http://tolua_rumtime" title="tolua_runtime">tolua_runtime</a>仓库下载缺失的C文件。</p>
<p>引入lua C源码后打包时会进行Complie WebAssembly Module编译步骤，就是编译刚刚引入的C库文件，假如这时候失败报错python.exe编译报错，则需要检查C文件，修改一下。</p>
<p><strong>打包过程中发现了两处离奇的编译错误</strong>。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_gMMazqvHi4.png" class="">
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_jpm_1FmNy0.png" class="">
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_wjmhGTQACV.png" class="">
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_lBXxnzYyz7.png" class="">
<p>关于bit库问题，luajit内置了，webgl平台需要单独开启，跟mac os类似情况，使用的bit也是luajit作者的</p>
<p>解决编译报错后，成功打出包。<strong>注意：目前tolua c库，只包含lua51，cjson，pbc，pb.c(proto gen), bit.c(luajit作者的bit库), tolua运行时 这几个源码</strong></p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_A5gllRKePb.png" class="">
<p><strong>另外编译lua的bytes，webgl是原生lua51，遇到以上jit的lua代码无法编译bytes，所以框架统一删掉，因为一直在客户端都是没有调用jit相关lua脚本的</strong></p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_5fUd5zvpx8.png" class="">
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_3tC5cwfsr5.png" class="">
<p><strong>对于源码pbc（实际上框架没有使用只是保留不想改源码调用），webgl平台编译还不识别&lt;&gt;，要改成</strong>“”</p>
<p><strong>另外webassembly编译c, c++代码，代码文件必须放在同一个目录下，不能有子目录，不然对于include的头文件要加相对目录，编译时候也不认，会报错提示找不到文件</strong></p>
<p>8.FileUtils类添加webgl平台加载ab路径的正确路径，成功加载Lua ab后，输出ab中所有assetName确认加载ab的filename，改写LuaFileUtils.cs获取Lua TextAsset的filename。</p>
<p>9.成功加载和解压Lua ab，tolua框架成功获取lua file buffer数据并成功执行输出log。</p>
<p>10.C#中执行Lua代码成功跑通，接下来跑通Lua执行C#注册的类代码，LuaClient.bind里使用了反射，其实可以直接引用LuaBinder类。去掉LocalExportLuaSetting中缺失引用的类（第三方，pgj等），generate一遍解决C#编译报错。</p>
<p>11.勾选development，打包编译到webAssembly module报错：unresolved symbol ZN14RefcountedData7ReleaseEv、luaopen_socket_core、luaopen_mime_core、luaopen_ffi。后面三个项目不用，直接在LuaDll中注释去掉，少了几个报错，但是还有一个。</p>
<p><em>20230104更新：</em></p>
<p><em>通过一步一步删除分拆代码打debug包的方式，逐步缩小问题的范围，发现只有加入ToLua导出的Wrap文件时，才会有出现这个编译错误：error: unresolved symbol: _ZN14RefcountedData7ReleaseEv。</em></p>
<p><em>利用二分法进一步缩小范围，最后发现只要编译UnityEngine_Rendering_CommandBufferWrap.cs就会报这个错。</em></p>
<p><em>这个Wrap文件没有在Lua中用到，处理方法可以使用宏过滤掉编译。</em></p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_7WdLCSVtdJ.png" class="">
<p>12.打release包，没有注释LuaDll的情况下打包，没有报错，成功打出，真是奇怪，猜测是未引用的库已经剥离了，但是development build认为还需要引用。</p>
<p>13.打包成功，成功执行到Lua业务逻辑，也就是说Lua能执行注册的C#类。</p>
<p>14.验证框架打包资源ab并加载，打包bootstrap的UI view prefab，去掉prefab上的缺失的Script，不然打包报脚本错误，修改LocalBundleStrategy之打包GameAssets/ui/view/下的资源，移除GameAssets/ui/view/bootstrap外的资源，排除其他资源的影响。</p>
<p>15.修改lua代码，跳过热更新逻辑和SDK初始化逻辑，至此webgl已经可以成功加载ui prefab ab，说明框架加载ab资源的能力已经跑通。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_J0oIdyHNOw.png" class="">
<p>16.将所有业务代码，ThirdParty三方库、AltasSource、GameAssets资源目录拉回来，打包ab，解决编译标错后，成功打出ab，但是因为webgl平台的fmod bank需要使用fmod studio重新build，所以缺少bank的ab。</p>
<p>17.build构建，webgl不支持的API会报找出不到namespace报错，Handheld（手持设备）、FullScreenMovieControlMode、FullScreenMovieScalingMode等，这写是toLua export的wrap文件，处理方法是加编译宏。解决build报错后，成功打出包。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_iWxvVgACJH.png" class="">
<p>成功出包说明了三方库Fmod、Live2Dv2和v4库，Spine都能够在webgl平台上成功编译。</p>
<p>后面通过player publishing settings配置勾选Debug Symbols，打release包输出调试符号表，通过查看符号表可以找到C#dll Live2D库、C源码的toLua库的函数。</p>
<p>说明C、C++源码、C#已经C#编译的DLL文件可以编译进wasm中。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_eKJtFbgNS2.png" class="">
<p>18.至此运行webgl包已经能入Loading页，但是运行时有个报错：RuntimeError: float unrepresentable in integer range，参考这篇<a target="_blank" rel="noopener" href="https://blog.csdn.net/ithinking110/article/details/112028638" title="文章">文章</a>，通过设置PlayerSettings.WebGL.emscriptenArgs = “-s “BINARYEN_TRAP_MODE=‘clamp’””;解决。</p>
<p>这点之后写入AudoPackage.cs中，根据webgl平台自动化添加PlayerSettings参数。</p>
<p>19.到这里就可以跑到fmod bank的加载逻辑，但是由于缺失bank，报资源加载error。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_cvqjYHFKmM.png" class="">
<p>20.webgl上资源加载重写，使用协程＋UnityWebRequest，去掉框架中的500帧超时重试逻辑，因为在web上调用UnityWebRequest.Abort()中断之后再试的逻辑跑不通，直接利用异步加载，等有结果后返回。</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_WEBGL</span></span><br><span class="line"></span><br><span class="line">  www = getUnityWebRequest (res.RealPath, fullPath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">return</span> www.SendWebRequest();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (www.result!=UnityWebRequest.Result.Success)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    Debug.LogErrorFormat(<span class="string">&quot;UnityWebRequest加载失败，result&#123;0&#125;,error:&#123;1&#125;,ab:&#123;2&#125;&quot;</span>, www.result, www.error, res.RealPath);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">newWWW</span> (<span class="params">res</span>)</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ab = DownloadHandlerAssetBundle.GetContent (www);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ab == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">      Debug.LogError(<span class="string">&quot;DownloadHandlerAssetBundle.GetContent获取null，&quot;</span>+res.RealPath);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      Debug.LogFormat(<span class="string">&quot;UnityWebRequest加载ab[&#123;0&#125;]成功&quot;</span>, res.RealPath);</span><br><span class="line"></span><br><span class="line">      res.SetAssetBundle (ab);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>AssetBundles中的bank文件是从FmodProj/Build/Mobile中拷贝过来的，至此可以成功加载ab和bank文件了。</p>
<p>21.fmod官方的<a target="_blank" rel="noopener" href="https://github.com/fmod/unity-html5-demo" title="unity-html5-demo">unity-html5-demo</a>支持webgl平台，但是但是pjg项目运行时播放不了bank，加载没问题就是没有声音。</p>
<p>使用fmod studio将项目中的bank，选择Desktop平台后，build一份到FmodProj/Build/Desktop下，拷贝我们的master和music的一份bank到unity-html-demo项目中，适配代码后Editor上播放有声音没有问题，但是打包到webgl上却播放不出声音。</p>
<p>这个问题我已经到fmod提了<a target="_blank" rel="noopener" href="https://github.com/fmod/unity-html5-demo/issues/4" title="Issues">Issues</a>，详细过程请移步查看。</p>
<p>反过来，将unity-html-demo中的master bank拷贝到我们项目中去，验证是不是bank的格式原因导致的。结果还真的可以正常播放，channels 和 volume是正常的，<strong>说明跟构建出来的bank的格式有很大的关系</strong>。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_8BOg2gT045.png" class="">
<p>那么项目的bank和demo中的bank有什么区别？最明显的就是项目中的bank使用了encryption key加密，而demo的bank没有加密。</p>
<p>为验证这个问题，用fmod studio去掉encryption key然后重新build bank（这个过程可以删减一部分bank以构建少量数据），最后发现放在demo中能正常播放了。</p>
<p>查下官方文档，发现<a target="_blank" rel="noopener" href="https://fmod.com/docs/2.02/unity/troubleshooting.html#cannot-fmod_openmemory_point-encrypted-data" title="LoadFromMemory和encryptionKey不兼容">LoadFromMemory和encryptionKey不兼容</a>，而webgl上正是使用LoadFromMemory加载web request请求回来的bank数据。</p>
<p>另外在<strong>webgl上确保使用异步方式加载bank</strong>，否者会报错，而这个报错<strong>假如没有在FmodAssetSettings上开启Enable API Error Logging的话，是不会报出来的，所以调试时候最好开启</strong>。</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">FMOD</span>] System::getEventByID(<span class="number">0x645bd0</span>:&#123;<span class="number">14</span>d7b992<span class="number">-3</span>a9c<span class="number">-4</span>d93<span class="number">-95</span>de<span class="number">-2</span>dfd73fdbf6e&#125;, <span class="number">0x645ba4</span>) <span class="function">returned ERR_EVENT_NOTFOUND <span class="keyword">for</span> <span class="title">STUDIO_SYSTEM</span> (<span class="params"><span class="number">0x1FFF1F</span></span>)</span></span><br></pre></td></tr></table></figure>
<p>为了支持bank加密，可以考虑将bank下载后先存到本地IndexDB，再使用LoadFromFile API读取，但需要考虑版本和加载时间问题。</p>
<p>22.Editor上webSocket已经调通，登录逻辑兼容webgl后，登录成功，至此成功进入到主界面。</p>
<p>23.WebGL上Input输入需要兼容下，Button和GlobalTouchTrigger类点击逻辑走mouse的输入获取，因为pc上不支持移动设备上的touch获取（支持touch api的设备才可以）。</p>
<p>对于键盘的输入捕获要注意下，除了游戏canvas，web界面上的其他Input输入框是捕获不到输入的，因为webgl会拦截捕获，解决需要参考<a target="_blank" rel="noopener" href="https://docs.unity3d.com/2020.3/Documentation/Manual/webgl-input.html" title="WebGL Input">WebGL Input</a>。</p>
<p>还有多点触碰能力需要兼容下【待处理】。</p>
<p>24.因为webgl development build有问题，所以允许gm按钮在release包上开启。</p>
<img src="/2023/01/16/%E9%A3%9F%E7%89%A9%E8%AF%AD%E5%85%BC%E5%AE%B9%E6%89%93%E5%8C%85%E7%BC%96%E8%AF%91%E5%88%B0WebGL/image_-YJGd2vFNT.png" class="">
<p>25.</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错：Looks like you are rendering without <span class="keyword">using</span> requestAnimationFrame <span class="keyword">for</span> the main loop. You should use <span class="number">0</span> <span class="keyword">for</span> the frame rate <span class="keyword">in</span> emscripten_set_main_loop <span class="keyword">in</span> order to use requestAnimationFrame, <span class="keyword">as</span> that can greatly improve your frame rates!</span><br></pre></td></tr></table></figure>
<p>webgl上不建议锁帧，构建的js框架代码会根据设备自动调节。参考<a target="_blank" rel="noopener" href="https://forum.unity.com/threads/rendering-without-using-requestanimationframe-for-the-main-loop.373331/" title="这里">这里</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Unity使用WebAssembly(wasm)技术将引擎代码和业务代码编译到WebGL平台上解析运行，截止目前2023年，PC浏览器对webgl的支持也越来越兼容普及，并且wasm具有可移植、体积小、加载快等特点，应用运行能接近原生的体验。&lt;/p&gt;
&lt;p&gt;为应对项目组拓展海外市场的发展战略，因为海外用户使用PC玩游戏比较多，所以先预研一下发布WebGL平台的整体流程。&lt;/p&gt;
&lt;p&gt;这里使用已经上线的项目——食物语来实践，这样遇到的问题比较有代表性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顺便打下广告，食物语是一项集中华传统美食文明和二次元风格于一体的女性向养成卡牌游戏，对美食和二次元感兴趣的同学，非常有必要下载玩玩~~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="平台" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/WebGL/"/>
    
    
      <category term="WebGL" scheme="https://laoleo.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>WebGL游戏可行性评估和兼容性测试</title>
    <link href="https://laoleo.github.io/2023/01/11/WebGL%E6%B8%B8%E6%88%8F%E5%8F%AF%E8%A1%8C%E6%80%A7%E8%AF%84%E4%BC%B0%E5%92%8C%E5%85%BC%E5%AE%B9%E6%80%A7%E6%B5%8B%E8%AF%95/"/>
    <id>https://laoleo.github.io/2023/01/11/WebGL游戏可行性评估和兼容性测试/</id>
    <published>2023-01-10T16:00:00.000Z</published>
    <updated>2023-01-18T07:21:14.434Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h2 id="WebGL浏览器兼容性"><a href="#WebGL浏览器兼容性" class="headerlink" title="WebGL浏览器兼容性"></a>WebGL浏览器兼容性</h2><ul>
<li>支持主流的桌面浏览器，但不同浏览器的不同版本支持程度和性能不一。</li>
<li>不支持移动设备，但在高端的移动设备上仍可以运行，瓶颈是内存。</li>
</ul>
<p><a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2018.4/Manual/webgl-browsercompatibility.html" title="各浏览器webgl兼容性表">各浏览器webgl兼容性表</a></p>
<h2 id="WebGL支持能力"><a href="#WebGL支持能力" class="headerlink" title="WebGL支持能力"></a>WebGL支持能力</h2><table>
<thead>
<tr>
<th>能力</th>
<th>支持程度</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>多线程</td>
<td>不支持</td>
<td>不支持System.Threading，将多线程代码替换成异步等方式实现</td>
</tr>
<tr>
<td>网络系统</td>
<td>需调整</td>
<td>不支持 <a target="_blank" rel="noopener" href="http://System.Net" title="System.Net">System.Net</a> 接口，HTTP使用UnityWebRequest，TCP使用 WebSocket 通信替代（UnityWebSocket 插件）</td>
</tr>
<tr>
<td>音频</td>
<td>支持</td>
<td>仅基于Web Audio API实现基础功能，不支持压缩和自动播放，不支持Fmod</td>
</tr>
<tr>
<td>图形API</td>
<td>支持</td>
<td>基于OpenGL ES图形库功能，WebGL 1.0 匹配 OpenGL ES 2.0 ，WebGL 2.0 匹配 OpenGL ES 3.0</td>
</tr>
<tr>
<td>动态生成代码</td>
<td>不支持</td>
<td>WebGL是AOT平台，不支持C#反射等动态代码方案</td>
</tr>
<tr>
<td>文件系统</td>
<td>需调整</td>
<td>PlayerPrefs、Unity Local储存文件，存在PresistetDataPath下的文件会储存进IndexedDB，IndexedDB无容量限制</td>
</tr>
<tr>
<td>Lua脚本</td>
<td>支持</td>
<td>支持使用ToLua</td>
</tr>
<tr>
<td>三方库</td>
<td>需调整</td>
<td>C#三方库不能包含System.Threading、<a target="_blank" rel="noopener" href="http://System.Net" title="System.Net">System.Net</a>、System.Reflection等接口</td>
</tr>
</tbody>
</table>
<h2 id="浏览器平台兼容性实测"><a href="#浏览器平台兼容性实测" class="headerlink" title="浏览器平台兼容性实测"></a>浏览器平台兼容性实测</h2><p>将打出的WebGL包放在各个浏览器运行测试</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>测试版本</th>
<th>运行情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>Google Chrome</td>
<td>108.0.5359.125（正式版本） （64 位）</td>
<td>1.各个模块运行基本正常&#xA;&#xA;2.fmod效果音刚播放时噪音有点大&#xA;&#xA;3.fmod背景音乐偶尔进入界面时未播放，像是没有触发，切换界面回来才会播，像是业务逻辑未兼容好的问题&#xA;&#xA;4.输入框捕获不到中文输入</td>
</tr>
<tr>
<td>Microsoft Edge</td>
<td>108.0.1462.54 (正式版本) (64 位)</td>
<td>运行情况跟Chrome相似</td>
</tr>
<tr>
<td>Mozila Firefox</td>
<td>108.0.1 (64 位)</td>
<td>1.fmod效果音刚播放时没有在chrome上噪音大的问题&#xA;&#xA;2.画质上比chrome高清&#xA;&#xA;3.输入框也捕获不到中文输入</td>
</tr>
<tr>
<td>Apple Safari</td>
<td>pjg的mac开发机上测试&#xA;&#xA;版本14.1.1</td>
<td>1.手机Safari访问，加载慢，能够进入到登录页，弹不起输入框，运行不久弹窗报错：<strong>WebGL builds are not supported on mobile devices</strong>. &#xA;&#xA;2.fmod的效果音播放的噪声问题也存在，内存紧张是更加明显&#xA;&#xA;3.pv视频播放不了，报user not allow，像是设置禁用了</td>
</tr>
<tr>
<td>360浏览器</td>
<td>版本号: 13.1.6380.01内核版本: 86.0.4240.198</td>
<td>进入主界面时报： Could not allocate memory: System out of memory! memory access out of bound，分配的内存不够&#xA;&#xA;有些贴图渲染不出来一片黑</td>
</tr>
<tr>
<td>360浏览器</td>
<td>版本号: 13.1.6380.01内核版本: 86.0.4240.198</td>
<td>进入主界面时报： Could not allocate memory: System out of memory! memory access out of bound，分配的内存不够&#xA;&#xA;有些贴图渲染不出来一片黑</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;WebGL浏览器兼容性&quot;&gt;&lt;a href=&quot;#WebGL浏览器兼容性&quot; class=&quot;headerlink&quot; title=&quot;WebGL浏览器兼容性&quot;&gt;&lt;/a&gt;WebGL浏览器兼容性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持主流
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="平台" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/WebGL/"/>
    
    
      <category term="WebGL" scheme="https://laoleo.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>WebGL上导出日志文件</title>
    <link href="https://laoleo.github.io/2023/01/05/WebGL%E4%B8%8A%E5%AF%BC%E5%87%BA%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/"/>
    <id>https://laoleo.github.io/2023/01/05/WebGL上导出日志文件/</id>
    <published>2023-01-04T16:00:00.000Z</published>
    <updated>2023-01-18T08:52:15.469Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h2 id="与日志相关的配置选项"><a href="#与日志相关的配置选项" class="headerlink" title="与日志相关的配置选项"></a>与日志相关的配置选项</h2><p>Player Setting-》Other Settings-》Stack Track</p>
<p>可以控制各个日志等级类型的输出，ScriptOnly只包括托管代码（C#、Lua），Full包括托管和非托管代码（C、C++）。</p>
<p>一般debug和release下勾ScriptOnly就够。</p>
<p>Publishing Settings-》Enable Exceptions</p>
<p>runtime下异常捕获的处理方式</p>
<ul>
<li>None：不捕获，异常发生后运行不了</li>
<li>Explicitly Thrown Exceptions Only：仅捕获Thrown语句显式调用抛出的异常。</li>
<li>Full Without Stacktrace：在上面的基础上加上空引用和数组越界访问异常，并且包含非托管代码的堆栈。</li>
<li>Full With Stacktrace：在上面基础上加上捕获堆栈。</li>
</ul>
<p>以上性能消耗由上都下递增，Full模式只建议调试时使用。</p>
<p>Development Build的js代码不会压缩且具有可读性，但遇到Error或Exception时可以看到堆栈跟踪。</p>
<h2 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h2><p>保存进<strong>Application.persistentDataPath</strong>目录下的文件，会被保存进IndexedDB，位于/idbfs数据库下的FILE_DATA仓库，包括PlayerPrefs、Unity local文件等，以二进制ArrayBuffer的形式存储。</p>
<img src="/2023/01/05/WebGL%E4%B8%8A%E5%AF%BC%E5%87%BA%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/image_ZrB80m7JK5.png" class="">
<p>所以Clogger模块的log日志可以从IndexedDB提取ArrayBuffer，然后解析成string，上报或者导出为Log文件。</p>
<p>IndexedDB没有容量限制。</p>
<p>Demo实现了WebGL导出Log文件，地址点击<a target="_blank" rel="noopener" href="https://github.com/LaoLeo/WebGLLogExport" title="WebGLLogExport Demo">这里</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;与日志相关的配置选项&quot;&gt;&lt;a href=&quot;#与日志相关的配置选项&quot; class=&quot;headerlink&quot; title=&quot;与日志相关的配置选项&quot;&gt;&lt;/a&gt;与日志相关的配置选项&lt;/h2&gt;&lt;p&gt;Player Setting
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="平台" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/WebGL/"/>
    
    
      <category term="WebGL" scheme="https://laoleo.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>WebGL脚本交互</title>
    <link href="https://laoleo.github.io/2023/01/05/WebGL%E8%84%9A%E6%9C%AC%E4%BA%A4%E4%BA%92/"/>
    <id>https://laoleo.github.io/2023/01/05/WebGL脚本交互/</id>
    <published>2023-01-04T16:00:00.000Z</published>
    <updated>2023-01-18T07:20:40.259Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<p>官网脚本间的交互<a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2022.1/Manual/webgl-interactingwithbrowserscripting.html" title="教程">教程</a>。</p>
<p>这里提一下注意点：</p>
<h3 id="1-jslib的js调用js函数"><a href="#1-jslib的js调用js函数" class="headerlink" title="1. jslib的js调用js函数"></a>1. jslib的js调用js函数</h3><p>jslib里嵌入的js函数并且被C# extern导出，被编译进Build.Framework.js下的Module作用域下，在js下的函数名加了_前缀。</p>
<p>打算在jslib里调用同样自己封装的js函数，需要两步，C#导出以及加上_前缀。</p>
<p>比如SyncDB函数调用ExportLogFile函数：</p>
<img src="/2023/01/05/WebGL%E8%84%9A%E6%9C%AC%E4%BA%A4%E4%BA%92/image_LH7j6YbDcD.png" class="">
<img src="/2023/01/05/WebGL%E8%84%9A%E6%9C%AC%E4%BA%A4%E4%BA%92/image_RKaYmVWOKt.png" class="">
<p>编译进js的函数：</p>
<img src="/2023/01/05/WebGL%E8%84%9A%E6%9C%AC%E4%BA%A4%E4%BA%92/image_Tc714gt9om.png" class="">
<img src="/2023/01/05/WebGL%E8%84%9A%E6%9C%AC%E4%BA%A4%E4%BA%92/image_z92_IORzd2.png" class="">
<h3 id="2-C-传给JS函数的参数转换"><a href="#2-C-传给JS函数的参数转换" class="headerlink" title="2.C#传给JS函数的参数转换"></a>2.C#传给JS函数的参数转换</h3><img src="/2023/01/05/WebGL%E8%84%9A%E6%9C%AC%E4%BA%A4%E4%BA%92/image_-2cjqXZEFd.png" class="">
<p>JS里拿到的string类型参数是一个内存地址，需要使用UTF8ToString来进行转换。</p>
<p><strong>注意的是</strong>，不能放在回调下面FS.syncfs的回调作用域内转换，必须放在参数自己的作用域，不然后面地址回收后转出来是不准确的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;官网脚本间的交互&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://docs.unity3d.com/cn/2022.1/Manual/webgl-interactingwithbr
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="平台" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/WebGL/"/>
    
    
      <category term="WebGL" scheme="https://laoleo.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>WebGL调试和打包</title>
    <link href="https://laoleo.github.io/2022/12/30/WebGL%E8%B0%83%E8%AF%95%E5%92%8C%E6%89%93%E5%8C%85/"/>
    <id>https://laoleo.github.io/2022/12/30/WebGL调试和打包/</id>
    <published>2022-12-29T16:00:00.000Z</published>
    <updated>2023-01-18T07:20:31.461Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h2 id="运行和调试"><a href="#运行和调试" class="headerlink" title="运行和调试"></a>运行和调试</h2><h3 id="两个起http服务器方案："><a href="#两个起http服务器方案：" class="headerlink" title="两个起http服务器方案："></a>两个起http服务器方案：</h3><ul>
<li><p><strong>Build and Run</strong></p>
<p>执行后Unity会起一个http服务器运行web界面，缺点是端口号每次都会变。</p>
</li>
<li><p><strong>自起http服务器</strong></p>
<p>利用node的npm包管理器下载http-server插件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --global http-server</span><br><span class="line">//起一个http服务器</span><br><span class="line">http-server</span><br><span class="line">// 或者，假如打出的包文件时gzip压缩，需加上-g</span><br><span class="line">http-server -g</span><br></pre></td></tr></table></figure>
<p>另外需要改http-server插件的一个文件，路径是：C:\Users\[yourusername]\AppData\Roaming\npm\node_modules\http-server\lib\core\index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索第一行注释找到这段代码，改为下面代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if (file === gzippedFile) &#123; // is .gz picked up</span></span><br><span class="line"><span class="keyword">if</span> (file === gzippedFile || path.<span class="title function_">extname</span>(file) ==<span class="string">&quot;.gz&quot;</span>) &#123; <span class="comment">// is .gz picked up</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Encoding&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>);</span><br><span class="line">  <span class="comment">// strip gz ending and lookup mime type</span></span><br><span class="line">  contentType = mime.<span class="title function_">lookup</span>(path.<span class="title function_">basename</span>(file, <span class="string">&#x27;.gz&#x27;</span>), defaultType);</span><br><span class="line"><span class="comment">//&#125; else if (file === brotliFile) &#123; // is .br picked up</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (file === brotliFile || path.<span class="title function_">extname</span>(file) ==<span class="string">&quot;.br&quot;</span>) &#123; <span class="comment">// is .br picked up  </span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Encoding&#x27;</span>, <span class="string">&#x27;br&#x27;</span>);</span><br><span class="line">  <span class="comment">// strip br ending and lookup mime type</span></span><br><span class="line">  contentType = mime.<span class="title function_">lookup</span>(path.<span class="title function_">basename</span>(file, <span class="string">&#x27;.br&#x27;</span>), defaultType);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><em>假如运行http-server命令报未找到命令，需要设置环境变量，添加：C:\Users[yourUserName]\AppData\Roaming\npm</em></p>
<h3 id="调试JS"><a href="#调试JS" class="headerlink" title="调试JS"></a>调试JS</h3><p>jslib文件插入的js代码会被打包进Build.framework.js里，但只有在C# Extern导出的才会被包含。</p>
<p>调试JS代码可以选择编辑Build.framework.js，加入Debug代码调试，快速方便，跳过打包。</p>
<h2 id="打webgl包设置"><a href="#打webgl包设置" class="headerlink" title="打webgl包设置"></a>打webgl包设置</h2><p>1.branch选择以下分支之外的分支，跳过MSDK的逻辑，或者可以手改Resources目录下的GameConst.txt下的branch字段。</p>
<p><em>20230104:更新：已处理成在国内分支上的MSDK上过滤掉webgl平台。</em></p>
<img src="/2022/12/30/WebGL%E8%B0%83%E8%AF%95%E5%92%8C%E6%89%93%E5%8C%85/image_tGLLj0XYUL.png" class="">
<p>2.在PlayerSetting.asset下搜索webGLEmscriptenArgs，手动添加下：webGLEmscriptenArgs: -s “BINARYEN_TRAP_MODE=’clamp’”</p>
<p>这可以跳过运行时报错：RuntimeError: float unrepresentable in integer range</p>
<p><em>20230104:更新：已添加并提交。</em></p>
<img src="/2022/12/30/WebGL%E8%B0%83%E8%AF%95%E5%92%8C%E6%89%93%E5%8C%85/image_xEZJCQfHjP.png" class="">
<p>3.打包不要勾选Development Build。</p>
<p>目前Development Build打包编译有报错，还跳跳不过这个坑。</p>
<p><em>20230104:更新：编译报错的问题已经找出并解决。</em></p>
<h2 id="打包配置说明"><a href="#打包配置说明" class="headerlink" title="打包配置说明"></a>打包配置说明</h2><h3 id="build-setting"><a href="#build-setting" class="headerlink" title="build setting"></a><a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2022.1/Manual/webgl-building.html" title="build setting">build setting</a></h3><p>Texture Compression：贴图压缩格式</p>
<p>Development build：dev模式构建，开启后链Profiler</p>
<p>Code Optimization：编译优化</p>
<ul>
<li>speed：优化包的运行时性能</li>
<li>size：构建包大小优先</li>
</ul>
<h3 id="Player-Setting"><a href="#Player-Setting" class="headerlink" title="Player Setting"></a><a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2022.1/Manual/class-PlayerSettingsWebGL.html" title="Player Setting">Player Setting</a></h3><p>Resolution And Presentaiton：web页面的游戏窗分辨率设置、模板设置。</p>
<p>Sqlash Image：web tab图标、游戏启动页动画、logo、背景图设置。</p>
<p>Other Settings</p>
<ul>
<li>Auto Graphics API：开启会交由Unity自动根据设备选择webGL图形API。默认WebGL2.0，不支持会回退到WebGL1.0。但Untiy2021.1后将弃用WebGL1.0，可禁用这个选项然后手动添加。</li>
</ul>
<p>Publishing Setting</p>
<ul>
<li>Compression Format：非dev构建的文件压缩格式，dev构建无作用。<strong>注意服务器nginx要配置支持解压，</strong><a target="_blank" rel="noopener" href="https://docs.unity3d.com/cn/2022.1/Manual/webgl-server-configuration-code-samples.html" title="参考链接"><strong>参考链接</strong></a><strong>。</strong></li>
<li>Decompression Fallback：勾选会构建包含未压缩的代码，解压失败会回退。</li>
<li>Data Caching：开启会自动将内容资源数据缓存在用户计算机上，这样就不必在后续运行中重新下载（除非内容已更改）。缓存是使用浏览器提供的 IndexedDB API 实现的。</li>
<li>Debug Symbols：对release包有效，在发生错误时保留调试符号并执行堆栈跟踪的恢复。对于发布版本，所有调试信息都存储在单独的文件中；发生错误时将根据需要从服务器下载该文件(Build/WebGLPackageProj.symbols.json)。开发版本始终具有嵌入在主模块中的恢复支持，因此不受此选项的影响。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;运行和调试&quot;&gt;&lt;a href=&quot;#运行和调试&quot; class=&quot;headerlink&quot; title=&quot;运行和调试&quot;&gt;&lt;/a&gt;运行和调试&lt;/h2&gt;&lt;h3 id=&quot;两个起http服务器方案：&quot;&gt;&lt;a href=&quot;#两个起h
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="平台" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="WebGL" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B9%B3%E5%8F%B0/WebGL/"/>
    
    
      <category term="WebGL" scheme="https://laoleo.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>SQLite替换lua配置表方案实现</title>
    <link href="https://laoleo.github.io/2022/09/30/SQLite%E6%9B%BF%E6%8D%A2lua%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0/"/>
    <id>https://laoleo.github.io/2022/09/30/SQLite替换lua配置表方案实现/</id>
    <published>2022-09-29T16:00:00.000Z</published>
    <updated>2022-12-17T14:04:08.684Z</updated>
    
    <content type="html"><![CDATA[<!-- # SQLite替换lua配置表方案实现 -->
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前游戏中的配置数据实在启动时一次性全部加载进内存，这种方式会造成一定的浪费。而SQLite是一个轻量级的、动态连接的数据库引擎。</p>
<p>下文探索使用SQLite替换Lua配置表解决内存浪费方案的实现。</p>
<span id="more"></span>
<h2 id="splite库的编译与引入"><a href="#splite库的编译与引入" class="headerlink" title="splite库的编译与引入"></a>splite库的编译与引入</h2><p>两个方向：</p>
<p>1.C#层引入sqlite3.dll，写好接口，暴露给lua层调用。</p>
<p>sqlite3.dll引入：<a target="_blank" rel="noopener" href="https://cloud.tencent.com/developer/news/314242" title="https://cloud.tencent.com/developer/news/314242">https://cloud.tencent.com/developer/news/314242</a></p>
<p>2.lua层使用第三方库lsqlite3，将lsqlite3库编译进tolua.dll，在lua层直接链接并操作数据库。</p>
<p>如何将三方库编译进tolua：<a target="_blank" rel="noopener" href="https://blog.csdn.net/linxinfa/article/details/90046840。" title="https://blog.csdn.net/linxinfa/article/details/90046840。">https://blog.csdn.net/linxinfa/article/details/90046840。</a></p>
<p>这个方案代价是需要将各个平台的tolua动态库文件都编译一遍，将lsqlite3库包含进来。</p>
<p>有两个三方库文件可以使用：</p>
<p>1.lsqlite3：动态链接sqlite3（所以需要将sqlite3也编译进tolua）。</p>
<p>2.lsqlite3complete：包含sqlite3在内，静态链接sqlite3（不用再将sqlite3编译进tolua）。</p>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><p>unity：2020.3.2f</p>
<p>真机：联想 拯救者2 pro/CPU晓龙888/内存8GB/Android 11</p>
<h3 id="1-堆内存对比"><a href="#1-堆内存对比" class="headerlink" title="1.堆内存对比"></a>1.堆内存对比</h3><table>
<thead>
<tr>
<th></th>
<th><strong>首次进入主界面</strong></th>
<th><strong>播放剧情</strong></th>
<th><strong>过一遍各个系统</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>lua配置表全加载</td>
<td>11.2MB</td>
<td>11.54MB</td>
<td>16.4MB</td>
</tr>
<tr>
<td>sqlite按需加载</td>
<td>9.2MB</td>
<td>9.45MB</td>
<td>15.69MB</td>
</tr>
</tbody>
</table>
<p>由于2020unity打的包真机上连不上profiler，所以以上数据在<strong>Editor</strong>用工具测试lua内存。</p>
<p>简单对比，sqlite按需加载配置方案在内存上比全加载lua配置表要<strong>节省内存。</strong> 理由可想而知，不必要的配置不用加载进内存。</p>
<h3 id="2-执行时间对比"><a href="#2-执行时间对比" class="headerlink" title="2.执行时间对比"></a>2.执行时间对比</h3><p>a.启动方式耗时对比</p>
<table>
<thead>
<tr>
<th><strong>启动时配置的加载方式</strong></th>
<th><strong>Editor-时间(s)</strong></th>
<th><strong>Android-时间(s)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>lua配置表全加载</td>
<td>0.035</td>
<td>0.030</td>
</tr>
<tr>
<td>sqlite连接db，加载所有表并解析</td>
<td>2.694</td>
<td>1.242</td>
</tr>
<tr>
<td>sqlite只链接db，按需加载表</td>
<td>0.004</td>
<td>0.016</td>
</tr>
</tbody>
</table>
<p>对比来看，启动时使用sqlite连接db按需加载表的方式快一点，但是比较是毫秒级别，原来的lua配置表全加载方式也不是很慢。</p>
<p>b.查找时间对比</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>查1次</strong></th>
<th><strong>查100次</strong></th>
<th><strong>查10000次</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>lua配置表</td>
<td>4.3e-05</td>
<td>0.0005</td>
<td>0.0025</td>
</tr>
<tr>
<td>sqlite</td>
<td>5.4e-05</td>
<td>0.0285</td>
<td>2.580</td>
</tr>
</tbody>
</table>
<p>配置表一般是只读，不会新增、修改、删除。从查找速度来看，肯定是lua配置表块，字典结构而且直接从内存中读，读取db就相对慢很多。单独看，单独一句查询id的sql执行效率也非常快。</p>
<h3 id="3-热更新方式对比"><a href="#3-热更新方式对比" class="headerlink" title="3.热更新方式对比"></a>3.热更新方式对比</h3><p>数据量：</p>
<ul>
<li><p>小量数据：对标周更后的hotfix，一般只会修改一两处配置，修改数据量在个位数。</p>
</li>
<li><p>一般数据：对标周更，使用git命令统计食物语周更lua配置文件修改情况，大约会有20个左右文件被修改。</p>
</li>
<li><p>大量数据：对标月更，统计得出大约有150个lua配置文件被修改。</p>
</li>
</ul>
<p>假设平均一个文件10行数据被修改，那么周更大约200条修改，月更大约1500条修改，一条修改对应一条sql语句。</p>
<p>对于替换db的热更方式，不管数据量都是整个db替换。</p>
<p>以下是测试数据，多次测量取平均的结果：</p>
<table>
<thead>
<tr>
<th><strong>【时间ms】</strong></th>
<th><strong>小量数据(9)</strong></th>
<th><strong>一般数据(200)</strong></th>
<th><strong>一般数据(800)</strong></th>
<th><strong>大量数据(1500)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>热更sql （一个sql文件作为一条命令）</td>
<td>12.9</td>
<td>51.2</td>
<td>892.3</td>
<td>2717</td>
</tr>
</tbody>
</table>
<p>以下是热更不同大小db文件的统计情况：</p>
<table>
<thead>
<tr>
<th><strong>db大小</strong></th>
<th><strong>1576kb（1.53MB）</strong></th>
<th><strong>33.4MB</strong></th>
<th><strong>60.6MB</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>压缩后</td>
<td>284kb</td>
<td>7.58MB</td>
<td>15.7MB</td>
</tr>
<tr>
<td>压缩率</td>
<td>82%</td>
<td>77%</td>
<td>74%</td>
</tr>
<tr>
<td>热更耗时ms (解压+替换+连接)</td>
<td>81.6</td>
<td>1000.5</td>
<td>1778.7</td>
</tr>
</tbody>
</table>
<img src="/2022/09/30/SQLite%E6%9B%BF%E6%8D%A2lua%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0/image_gp3VMdO0Er.png" class="">
<p>将两种方式放在一起对比，可以直观得出结论：<strong>hotfix、周更比较适合选sql方式，月更选替换db方式</strong>。</p>
<p><strong>上面sql执行是一次性执行整个sql文件字符串，所以sql命令解析时间比较长。后面优化以行为单位执行sql文件，5000行左右的sql执行效率在0.5s左右，效率比替换30M DB还高。</strong></p>
<h2 id="工作量设计"><a href="#工作量设计" class="headerlink" title="工作量设计"></a>工作量设计</h2><p>流程图：</p>
<img src="/2022/09/30/SQLite%E6%9B%BF%E6%8D%A2lua%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0/image_iqXG1maoM7.png" class="">
<h3 id="1-导表工具改造，cvs表格导入db"><a href="#1-导表工具改造，cvs表格导入db" class="headerlink" title="1.导表工具改造，cvs表格导入db"></a>1.导表工具改造，cvs表格导入db</h3><p>a.类型转换</p>
<p>C#方法获取的数值类型在lua中属于userdata，发现的影响是不能直接和string直接拼接，稳妥起见，最好使用tonumber(tostring(userdata))转换为lua的数值类型。</p>
<p>配置表中常见的类型需要对应db的存储类型：</p>
<table>
<thead>
<tr>
<th><strong>配置表中的类型</strong></th>
<th><strong>number</strong></th>
<th><strong>string&amp;mlstring</strong></th>
<th><strong>float</strong></th>
<th><strong>boolean</strong></th>
<th><strong>datetime</strong></th>
<th>[type] ([number]&amp;[string])</th>
</tr>
</thead>
<tbody>
<tr>
<td>对应的db存储的类型</td>
<td>int64</td>
<td>string</td>
<td>float</td>
<td>boolean</td>
<td>string</td>
<td>string</td>
</tr>
</tbody>
</table>
<p>说明：[type]表示数组类型，元素类型多为number或者string，db中存储为string类型即可，lua中取出来时再解析为table。存为string时候，开头添加标识符<code>[type]:</code>，表示需要被解析。</p>
<p>lua中获取各类型转换方式如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> fieldName, value = reader:GetName(i), <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">type</span> = reader:GetFieldType(i);</span><br><span class="line"><span class="built_in">type</span> = <span class="built_in">tostring</span>(<span class="built_in">type</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;System.Int64&quot;</span> <span class="keyword">or</span> <span class="built_in">type</span> == <span class="string">&quot;System.Int32&quot;</span> <span class="keyword">or</span> <span class="built_in">type</span> == <span class="string">&quot;System.Int16&quot;</span> <span class="keyword">then</span></span><br><span class="line">    value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:get_Item(fieldName)))</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="string">&quot;System.Float&quot;</span> <span class="keyword">then</span></span><br><span class="line">    value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:GetFloat(i)))</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="string">&quot;System.Double&quot;</span> <span class="keyword">then</span></span><br><span class="line">    value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:GetDouble(i)))</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="string">&quot;System.Decimal&quot;</span> <span class="keyword">then</span></span><br><span class="line">    value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:GetDecimal(i)))</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="string">&quot;System.Boolean&quot;</span> <span class="keyword">then</span></span><br><span class="line">    value = <span class="built_in">tostring</span>(reader:GetBoolean(i))==<span class="string">&quot;true&quot;</span> <span class="keyword">and</span> <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="string">&quot;System.String&quot;</span> <span class="keyword">then</span></span><br><span class="line">    value = <span class="built_in">tostring</span>(reader:get_Item(fieldName)</span><br><span class="line">   <span class="keyword">if</span> <span class="string">&quot;[type]:&quot;</span> == <span class="built_in">string</span>.<span class="built_in">sub</span>(value, <span class="number">1</span>, <span class="number">7</span>) <span class="keyword">then</span></span><br><span class="line">        value = GameUtils.json.decode(<span class="built_in">string</span>.<span class="built_in">sub</span>(value, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>b.cvs2db数据解析导入工具</p>
<p>sqlite清空表不支持TRUNCATE TABLE语句，需用DELETE FROM TableName。</p>
<p>sqlite语句和传统的sql语句不太一样，比如不支持多行插入数据，只支持单行插入。</p>
<p>推荐<a target="_blank" rel="noopener" href="http://sqlite.jsrun.net/" title="在线sqlite运行工具">在线sqlite运行工具</a>测试语句，或者在<a target="_blank" rel="noopener" href="https://www.navicat.com.cn/download/navicat-for-sqlite" title="Navicat for SQLite">Navicat for SQLite</a>软件上新建查询执行sql语句。</p>
<h3 id="2-config类接口适配"><a href="#2-config类接口适配" class="headerlink" title="2.config类接口适配"></a>2.config类接口适配</h3><p>需要在lua层链接数据库，查询表读出数据，然后将数据格式化成相同结构的lua配置表类（t_xxx.lua），这样就可以低成本适配config类接口。</p>
<p>这里关键点在于处理db数据类型转换lua数据类型，也就是上述的lua中获取各类型转换方式。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> M = class(<span class="string">&quot;SqliteMonoMgr&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">local</span> TInt64 = <span class="string">&quot;Int64&quot;</span></span><br><span class="line"><span class="keyword">local</span> TInt32 = <span class="string">&quot;Int32&quot;</span></span><br><span class="line"><span class="keyword">local</span> TInt16 = <span class="string">&quot;Int16&quot;</span></span><br><span class="line"><span class="keyword">local</span> TFloat = <span class="string">&quot;Float&quot;</span></span><br><span class="line"><span class="keyword">local</span> TDouble = <span class="string">&quot;Double&quot;</span></span><br><span class="line"><span class="keyword">local</span> TDecimal = <span class="string">&quot;Decimal&quot;</span></span><br><span class="line"><span class="keyword">local</span> TBoolean = <span class="string">&quot;Boolean&quot;</span></span><br><span class="line"><span class="keyword">local</span> TString = <span class="string">&quot;String&quot;</span></span><br><span class="line"><span class="keyword">local</span> TArrayPrefix = <span class="string">&quot;[type]:&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:loadConfigTable</span><span class="params">(tableName)</span></span></span><br><span class="line">    <span class="keyword">local</span> ret,reader = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">xpcall</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> pks = <span class="built_in">self</span>:_getPrimaryKeys(tableName)</span><br><span class="line">        reader = <span class="built_in">self</span>._sqliteManager:SQLSelect(tableName)</span><br><span class="line">        <span class="keyword">if</span> reader <span class="keyword">and</span> <span class="keyword">not</span> reader.IsClosed <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>._cache[tableName] = <span class="built_in">self</span>:_readConfigTable(reader, pks)</span><br><span class="line">            <span class="built_in">self</span>._loadedTable[tableName] = <span class="literal">true</span></span><br><span class="line">            reader:Close()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ret = <span class="literal">false</span></span><br><span class="line">            printWarn(<span class="string">&quot;not such table &quot;</span>..tableName)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span></span><br><span class="line">        ret = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> reader <span class="keyword">then</span></span><br><span class="line">            reader:Close()</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        printError(err)</span><br><span class="line">        <span class="comment">-- self:close()</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">     </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:_readConfigTable</span><span class="params">(reader, pks)</span></span></span><br><span class="line">    <span class="keyword">local</span> configTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> reader.HasRows <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> configTable</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">local</span> dataList, title = <span class="built_in">self</span>:_readDataListAndTitle(reader)</span><br><span class="line">    configTable.dataList = dataList</span><br><span class="line">    <span class="comment">-- 按索引构造字典</span></span><br><span class="line">    <span class="keyword">local</span> pkCount,temp = #pks,<span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> pkCount&gt;<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(dataList) <span class="keyword">do</span></span><br><span class="line">            temp = configTable</span><br><span class="line">            <span class="keyword">for</span> i=<span class="number">1</span>,pkCount,<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">local</span> pk = pks[i]</span><br><span class="line">                <span class="keyword">local</span> pv = v[pk]</span><br><span class="line">                <span class="keyword">if</span> i==pkCount <span class="keyword">then</span></span><br><span class="line">                    temp[pv] = v</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> temp[pv] <span class="keyword">then</span></span><br><span class="line">                    temp[pv] = &#123;&#125;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                temp = temp[pv]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">         </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> configTable</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:_readDataListAndTitle</span><span class="params">(reader)</span></span></span><br><span class="line">    <span class="keyword">local</span> title = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> dataList = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> reader:Read() <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> visibleFieldCount, row = reader.VisibleFieldCount, &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">0</span>, visibleFieldCount - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">local</span> fieldName, value = reader:GetName(i), <span class="literal">nil</span>;</span><br><span class="line">            title[fieldName] = i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">type</span> = reader:GetFieldType(i);</span><br><span class="line">            <span class="built_in">type</span> = <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">tostring</span>(<span class="built_in">type</span>), <span class="number">8</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span> == TInt64 <span class="keyword">or</span> <span class="built_in">type</span> == TInt32 <span class="keyword">or</span> <span class="built_in">type</span> == TInt16 <span class="keyword">then</span></span><br><span class="line">                value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:get_Item(fieldName)))</span><br><span class="line">            <span class="keyword">elseif</span> <span class="built_in">type</span> == TFloat <span class="keyword">then</span></span><br><span class="line">                value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:GetFloat(i)))</span><br><span class="line">            <span class="keyword">elseif</span> <span class="built_in">type</span> == TDouble <span class="keyword">then</span></span><br><span class="line">                value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:GetDouble(i)))</span><br><span class="line">            <span class="keyword">elseif</span> <span class="built_in">type</span> == TDecimal <span class="keyword">then</span></span><br><span class="line">                value = <span class="built_in">tonumber</span>(<span class="built_in">tostring</span>(reader:GetDecimal(i)))</span><br><span class="line">            <span class="keyword">elseif</span> <span class="built_in">type</span> == TBoolean <span class="keyword">then</span></span><br><span class="line">                value = <span class="built_in">tostring</span>(reader:GetBoolean(i))==<span class="string">&quot;true&quot;</span> <span class="keyword">and</span> <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">elseif</span> <span class="built_in">type</span> == TString <span class="keyword">then</span></span><br><span class="line">                <span class="comment">-- value = reader:GetString(i)</span></span><br><span class="line">                value = <span class="built_in">tostring</span>(reader:get_Item(fieldName))</span><br><span class="line">                <span class="keyword">if</span> TArrayPrefix == <span class="built_in">string</span>.<span class="built_in">sub</span>(value, <span class="number">1</span>, <span class="number">7</span>) <span class="keyword">then</span></span><br><span class="line">                    value = GameUtils.json.decode(<span class="built_in">string</span>.<span class="built_in">sub</span>(value, <span class="number">8</span>))</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">insert</span>(row, value)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(dataList, row)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">-- 构造元表</span></span><br><span class="line">     <span class="keyword">local</span> mt = &#123;</span><br><span class="line">        <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t, key)</span></span></span><br><span class="line">            <span class="keyword">local</span> index = title[key]</span><br><span class="line">            <span class="keyword">if</span> index <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">rawget</span>(t, index)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(dataList) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(v, mt)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> dataList, title</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:_getPrimaryKeys</span><span class="params">(tableName)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>._tablePrimaryKeyCache[tableName] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>._tablePrimaryKeyCache[tableName]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> pks = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> reader = <span class="built_in">self</span>._sqliteManager:ExecuteReader(<span class="string">&quot;PRAGMA table_info(&quot;</span>..tableName..<span class="string">&quot;)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> reader <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">while</span> reader:Read() <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">local</span> isPk = reader:GetBoolean(reader:GetOrdinal(<span class="string">&quot;pk&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> isPk <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">table</span>.<span class="built_in">insert</span>(pks, reader:get_Item(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        reader:Close()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">self</span>._tablePrimaryKeyCache[tableName] = pks</span><br><span class="line">    <span class="keyword">return</span> pks</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="3-按需加载表"><a href="#3-按需加载表" class="headerlink" title="3.按需加载表"></a>3.按需加载表</h3><p>可以利用lua元表，当table索引一个表时再去查询db读取整个表并解析成lua配置表类。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> configDictMetaTable = &#123;</span><br><span class="line">    <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t, key)</span></span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">rawget</span>(t, key) <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sqlite 加载表：&quot;</span> .. key)</span><br><span class="line">            <span class="keyword">local</span> configTable = SqliteMonoMgr.instance:findAll(key)</span><br><span class="line">            <span class="built_in">rawset</span>(t, key, configTable)</span><br><span class="line">            <span class="keyword">return</span> configTable</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ConfigMgr.instance.requestConfig = <span class="function"><span class="keyword">function</span><span class="params">(self, name, configObj)</span></span></span><br><span class="line">    <span class="keyword">local</span> mt = <span class="built_in">getmetatable</span>(configObj._dict)</span><br><span class="line">    <span class="keyword">if</span> mt ~= configDictMetaTable <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(configObj._dict, configDictMetaTable)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> isExistInDB = SqliteMonoMgr.instance:isExistTable(name)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>._configDict[name] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> content = <span class="built_in">self</span>._configDict[name]</span><br><span class="line">        configObj:handleConfig(name, content)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">local</span> content</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isExistInDB <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">path</span> = <span class="built_in">self</span>._pathPrefix .. name</span><br><span class="line">            content = <span class="built_in">require</span>(<span class="built_in">path</span>)</span><br><span class="line">            <span class="built_in">self</span>._configDict[name] = content</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        configObj:handleConfig(name, content)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>框架中lua配置是预加载+全加载的，其实也可以利用元表做到懒加载，当真正用到数据是才加载。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genProxyMt</span><span class="params">(name, path)</span></span></span><br><span class="line">    <span class="keyword">local</span> name = name</span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">path</span> = <span class="built_in">path</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">loaded</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">local</span> datasource = <span class="literal">nil</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(t, k)</span></span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">loaded</span> <span class="keyword">then</span></span><br><span class="line">                datasource = <span class="built_in">require</span>(<span class="built_in">path</span>)</span><br><span class="line">                ConfigMgr.instance:_preProcessConfig(datasource, name)</span><br><span class="line">                <span class="built_in">loaded</span> = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">return</span> datasource[k]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConfigMgr:requestConfig</span><span class="params">(name,configObj)</span></span></span><br><span class="line">    <span class="keyword">local</span> proxy = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> mt_proxy = &#123;</span><br><span class="line">        <span class="built_in">__index</span> = genProxyMt(name, <span class="built_in">path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(proxy, mt_proxy)</span><br><span class="line">    configObj:handleConfig(name, proxy)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="4-单独一套sqlite-lua查询接口"><a href="#4-单独一套sqlite-lua查询接口" class="headerlink" title="4.单独一套sqlite lua查询接口"></a>4.单独一套sqlite lua查询接口</h3><p>用于业务查询配置，区别于以往方案的baseConfig类。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> M = class(<span class="string">&quot;SqliteMonoMgr&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 根据id查询</span></span><br><span class="line"><span class="comment">-- @return 返回主键查询结果，只有一条数据返回数据本身，多条数据返回table（多个主键的情况）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:findById</span><span class="params">(tableName, value, pk)</span></span></span><br><span class="line">    <span class="keyword">if</span> GameUtils.isEmptyString(tableName) <span class="keyword">then</span></span><br><span class="line">        printError(<span class="string">&quot;tableName is nil.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> t = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line">    <span class="keyword">if</span> pk==<span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        pk = <span class="string">&quot;id&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>._cache[tableName] <span class="keyword">and</span> <span class="built_in">self</span>._cache[tableName][value] <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;findById 命中缓存耗时：&quot;</span>..<span class="built_in">os</span>.<span class="built_in">clock</span>()-t, tableName, value, pk)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>._cache[tableName][value]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> reader = <span class="built_in">self</span>._sqliteManager:SQLSelect(tableName, <span class="string">&quot;*&quot;</span>, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;where %s=%s&quot;</span>, pk, value))</span><br><span class="line">    <span class="keyword">if</span> reader <span class="keyword">and</span> <span class="keyword">not</span> reader.IsClosed <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> dataList = <span class="built_in">self</span>:_readDataListAndTitle(reader)</span><br><span class="line">        reader:Close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">self</span>._cache[tableName] <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>._cache[tableName] = &#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> #dataList==<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>._cache[tableName][value] = dataList[<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;findById 耗时：&quot;</span>..<span class="built_in">os</span>.<span class="built_in">clock</span>()-t, tableName, value, pk)</span><br><span class="line">            <span class="keyword">return</span> dataList[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;findById 耗时：&quot;</span>..<span class="built_in">os</span>.<span class="built_in">clock</span>()-t, tableName, value, pk)</span><br><span class="line">            <span class="built_in">self</span>._cache[tableName][value] = dataList</span><br><span class="line">            <span class="keyword">return</span> dataList</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 根据条件查询</span></span><br><span class="line"><span class="comment">-- @return 返回table</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:findAll</span><span class="params">(tableName, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> t = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line">    <span class="keyword">local</span> conditions = &#123;...&#125;</span><br><span class="line">    <span class="keyword">if</span> #conditions==<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">self</span>._loadedTable[tableName] <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>:loadConfigTable(tableName)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;findAll 耗时：&quot;</span>..<span class="built_in">os</span>.<span class="built_in">clock</span>()-t, tableName)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>._cache[tableName]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">local</span> conditionStr = <span class="string">&quot;where&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,#conditions,<span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> key = conditions[i]</span><br><span class="line">        <span class="keyword">local</span> value = conditions[i+<span class="number">1</span>]</span><br><span class="line">        conditionStr = conditionStr..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot; %s=%s and&quot;</span>, key, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    conditionStr = <span class="built_in">string</span>.<span class="built_in">sub</span>(conditionStr, <span class="number">1</span>, <span class="number">-4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sql conditionStr:&quot;</span>, conditionStr)</span><br><span class="line">    <span class="keyword">local</span> reader = <span class="built_in">self</span>._sqliteManager:SQLSelect(tableName, <span class="string">&quot;*&quot;</span>, conditionStr)</span><br><span class="line">    <span class="keyword">if</span> reader <span class="keyword">and</span> <span class="keyword">not</span> reader.IsClosed <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> dataList = <span class="built_in">self</span>:_readDataListAndTitle(reader)</span><br><span class="line">        reader:Close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;findAll 耗时：&quot;</span>..<span class="built_in">os</span>.<span class="built_in">clock</span>()-t, tableName)</span><br><span class="line">        <span class="keyword">return</span> dataList</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 通过输入sql查询</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M:findAllBySql</span><span class="params">(sql)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.isEmptyString(sql) <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> t = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line">    <span class="keyword">local</span> reader = <span class="built_in">self</span>._sqliteManager:ExecuteReader(sql)</span><br><span class="line">    <span class="keyword">if</span> reader <span class="keyword">and</span> <span class="keyword">not</span> reader.IsClosed <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> dataList = <span class="built_in">self</span>:_readDataListAndTitle(reader)</span><br><span class="line">        reader:Close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;findAllBySql 耗时：&quot;</span>..<span class="built_in">os</span>.<span class="built_in">clock</span>()-t)</span><br><span class="line">        <span class="keyword">return</span> dataList</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="5-db化整为零"><a href="#5-db化整为零" class="headerlink" title="5.db化整为零"></a>5.db化整为零</h3><p>导表工具按Excel目录划分db，一级子目录下Excel表导入到db中，db名以目录名命名。</p>
<p>同时游戏运行时支持多db连接。</p>
<p>表划分db分类：</p>
<ul>
<li><p>经常改动的配置</p>
</li>
<li><p>很少改动的配置</p>
</li>
<li><p>剧情表</p>
</li>
</ul>
<h3 id="6-压缩和热更db"><a href="#6-压缩和热更db" class="headerlink" title="6.压缩和热更db"></a>6.压缩和热更db</h3><p>制作Editor工具，使用ICSharpCode.SharpZipLib.Zip库压缩db，这个库有个控制压缩率的参数compressionLevel(0-9)，以上实测得到的压缩率使用参数值为5，压缩率80%左右。</p>
<p>热更db主要是解压缩和提取替换db文件。</p>
<h3 id="7-数据量大的表的读取方式"><a href="#7-数据量大的表的读取方式" class="headerlink" title="7.数据量大的表的读取方式"></a>7.数据量大的表的读取方式</h3><p>比如language表有13w条数据，这样的表一般不能整个表加载，而要逐条根据id加载+缓存的方式，需要测试下性能。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="1-Mono-Data-Sqlite-dll"><a href="#1-Mono-Data-Sqlite-dll" class="headerlink" title="1.Mono.Data.Sqlite.dll"></a>1.Mono.Data.Sqlite.dll</h3><p>根据网上的资料实测，不能使用Editor\Data\MonoBleedingEdge\lib\mono\2.0-api目录下的Mono.Data.Sqlite.dll，使用这个dll打成apk会报类的属性和方法引用空报错。说明不兼容。</p>
<img src="/2022/09/30/SQLite%E6%9B%BF%E6%8D%A2lua%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0/image_SUK4XBL1kd.png" class="">
<p>而应该引用\Editor\Data\Mono\lib\mono\2.0目录下的Mono.Data.Sqlite.dll，即使两者都是Targets .NET 3.5。</p>
<p>使用的Unity版本是Unity2020.3.2f1，其下没有\Editor\Data\Mono目录，但发现<strong>2018.2.3f1，2017.4.37f1下</strong>有这个目录 <strong>。</strong></p>
<p>一开始就使用了Editor\Data\MonoBleedingEdge\下的，Editor上测试正常使用，但是安卓上Mono.Data.Sqlite下的类的某些属性和方法会不兼容报空引用报错（state属性、CreateCommand方法）。</p>
<p>从<strong>2018.2.3f1</strong>下拷贝过来使用，Editor和apk上测试正常了。理解应该是\Editor\Data\Mono\lib\mono\2.0下的dll才兼容，而且这个dll在vs上可以查看到源码。</p>
<p>用ILSpy反编译dll对比：</p>
<img src="/2022/09/30/SQLite%E6%9B%BF%E6%8D%A2lua%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0/image_S_dTSQElWB.png" class="">
<img src="/2022/09/30/SQLite%E6%9B%BF%E6%8D%A2lua%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0/image_DulaDCWifu.png" class="">
<p>最大区别就是版本和Runtime不一样、一个包含源代码和一个只包含了元数据。空报错的原因最大可能是没有把执行代码编译进来。</p>
<h3 id="2-Net-Standard-2-0和-Net-4-x"><a href="#2-Net-Standard-2-0和-Net-4-x" class="headerlink" title="2..Net Standard 2.0和.Net 4.x"></a>2..Net Standard <a target="_blank" rel="noopener" href="http://2.xn--0-se9a.Net" title="2.0和.Net">2.0和.Net</a> 4.x</h3><p>Project Setting&gt;player的Api Compatibility Level选择2.0或4.x，测试都是正常。</p>
<h3 id="3-System-Data-dll"><a href="#3-System-Data-dll" class="headerlink" title="3.System.Data.dll"></a>3.System.Data.dll</h3><p>网上说需要引入这个dll，但是实测不引入也正常使用。</p>
<h3 id="4-connectionString和db存放位置"><a href="#4-connectionString和db存放位置" class="headerlink" title="4.connectionString和db存放位置"></a>4.connectionString和db存放位置</h3><p>安卓上connectionString使用data source=或者URI=file:都可以，但是后面路径不能包内路径，即jar:file://开头的，不然读取失败报错：System.ArgumentException: Invalid ConnectionString format。</p>
<p>db文件只能放在外部可读写目录，即Application.persistentDataPath。db位于包体内，需要拷贝到外部目录。</p>
<p>参考：</p>
<ul>
<li><p><a target="_blank" rel="noopener" href="https://stackoverflow.com/questions/50753569/setup-database-sqlite-for-unity" title="https://stackoverflow.com/questions/50753569/setup-database-sqlite-for-unity">https://stackoverflow.com/questions/50753569/setup-database-sqlite-for-unity</a></p>
</li>
<li><p><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/112232175" title="https://zhuanlan.zhihu.com/p/112232175">https://zhuanlan.zhihu.com/p/112232175</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- # SQLite替换lua配置表方案实现 --&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前游戏中的配置数据实在启动时一次性全部加载进内存，这种方式会造成一定的浪费。而SQLite是一个轻量级的、动态连接的数据库引擎。&lt;/p&gt;
&lt;p&gt;下文探索使用SQLite替换Lua配置表解决内存浪费方案的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="SQLite" scheme="https://laoleo.github.io/tags/SQLite/"/>
    
      <category term="配置表" scheme="https://laoleo.github.io/tags/%E9%85%8D%E7%BD%AE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="https://laoleo.github.io/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://laoleo.github.io/2022/05/15/网络层/</id>
    <published>2022-05-14T16:00:00.000Z</published>
    <updated>2022-12-17T13:53:29.951Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/image_FgCmH2uIWr.png" class="">
<span id="more"></span>
<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><img src="/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/image_FgCmH2uIWr.png" class="">
<p>数据传输格式使用protobuf工具协定，tolua集成了protobuf提供使用。</p>
<p>protobuf.lua：构造协议体、赋值、扩展。</p>
<img src="/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/image_skRP8CouhK.png" class="">
<p>数据上行下行序列化过程</p>
<img src="/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/image_UuuQAgKiON.png" class="">
<p>大小端</p>
<p>大小端指数据在机器中的字节在内存中的排序方式。<a target="_blank" rel="noopener" href="https://blog.csdn.net/wwwlyj123321/article/details/100066463" title="链接">链接</a></p>
<img src="/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/image_Dxda6OJqZV.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/05/15/%E7%BD%91%E7%BB%9C%E5%B1%82/image_FgCmH2uIWr.png&quot; class=&quot;&quot;&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="network" scheme="https://laoleo.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>UIParticle@4.0.0研究</title>
    <link href="https://laoleo.github.io/2022/03/18/UIParticle@4.0.0%E7%A0%94%E7%A9%B6/"/>
    <id>https://laoleo.github.io/2022/03/18/UIParticle@4.0.0研究/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-12-17T13:56:18.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIParticle-4-0-0研究"><a href="#UIParticle-4-0-0研究" class="headerlink" title="UIParticle\@4.0.0研究"></a>UIParticle\@4.0.0研究</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>UIParticle刚开始引进项目中的版本是@3.3.10，发现的问题比较多，材质数不能超8个的问题也在github上提了<a target="_blank" rel="noopener" href="https://github.com/mob-sakai/ParticleEffectForUGUI/issues/122" title="bug#122">bug#122</a>。</p>
<span id="more"></span>
<p>作者最近升级UIParticle到v4，解决了一些问题和增加了新特性，其中包括bug#122。</p>
<p>所以来研究一下，这个新版本的优化内容对项目有没有价值，考虑是否有必要升级版本。</p>
<h2 id="bug修复"><a href="#bug修复" class="headerlink" title="bug修复"></a>bug修复</h2><p>1.submesh can not over 8问题修复</p>
<p>即使是使用很多材质的特效，都没有输出警告了。</p>
<p>2.使用meshRenderer和uv动画实现的烟雾渲染层级不在UI layer问题</p>
<p>使用meshRenderer的粒子不会被UIParticle渲染，因为UIParticle使用了新类UIParticleRenderer进行渲染，同样不会处理非粒子系统下的网格和材质。</p>
<p>3.共享材质问题</p>
<p>动画修改材质属性，共享材质不会同步变化，估计是内部实现已经不使用sharedMaterial属性。</p>
<p>4.ParticleSystem的所有的粒子都能被UIParticle渲染出来吗？</p>
<p>还是拿家具抽奖的那个特效ui_jiajuchoujiang来测试，依然有部分没有渲染出来，而且跟渲染顺序无关。</p>
<p>5.勾选ignoreCanvasScale后不同分辨率下大小不对问题</p>
<p>放弃了ignoreCanvasScale属性，重构了ui缩放逻辑，所以这么问题应该是解决了。</p>
<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><p>1.UI自适应缩放</p>
<p>也就是上述第5点。</p>
<p>2.新增吸引子组件</p>
<p>可以吸引粒子沿着某种路径到某个位置，属于效果扩展上的新特性。</p>
<p>3.网格共享组</p>
<p>渲染大量相同粒子时可以使用相同的网格共享组，属于性能优化上的改进。</p>
<p>4.add overlay window</p>
<p>overlay window是unity2021.2开始提供的scene window的覆盖窗口特性，可以自定义菜单，unity2020没有这个特效。</p>
<p>另外Inspector面板做了优化，去掉了IgnoreCanvasScale属性，新增了mesh sharing接口，也支持输出一些警告。</p>
<p>详细看看<a target="_blank" rel="noopener" href="https://github.com/mob-sakai/ParticleEffectForUGUI/releases" title="更新日志">更新日志</a>。</p>
<p><strong>有个问题就是，升级后需要对UIparticle特效的scale重新调整，这点比较麻烦。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UIParticle-4-0-0研究&quot;&gt;&lt;a href=&quot;#UIParticle-4-0-0研究&quot; class=&quot;headerlink&quot; title=&quot;UIParticle\@4.0.0研究&quot;&gt;&lt;/a&gt;UIParticle\@4.0.0研究&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;UIParticle刚开始引进项目中的版本是@3.3.10，发现的问题比较多，材质数不能超8个的问题也在github上提了&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/mob-sakai/ParticleEffectForUGUI/issues/122&quot; title=&quot;bug#122&quot;&gt;bug#122&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unity" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E7%89%B9%E6%95%88/"/>
    
    
      <category term="UIParticle" scheme="https://laoleo.github.io/tags/UIParticle/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>UIParticle组件的使用问题</title>
    <link href="https://laoleo.github.io/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://laoleo.github.io/2022/03/05/UIParticle组件的使用问题/</id>
    <published>2022-03-04T16:00:00.000Z</published>
    <updated>2022-12-17T13:56:51.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIParticle组件的使用问题"><a href="#UIParticle组件的使用问题" class="headerlink" title="UIParticle组件的使用问题"></a>UIParticle组件的使用问题</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>假如能通过代码，对原本的粒子特效prefab，动态添加UIPartcle组件，并且表现效果和RT一样，这样就能够自动化的优化项目中RT特效。</p>
<span id="more"></span>
<h2 id="二、demo测试"><a href="#二、demo测试" class="headerlink" title="二、demo测试"></a>二、demo测试</h2><p>写个demo测试效果，各种RT规格特效选取几个，观察转换前后的效果。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/uiparticleCompare.gif" class="">
<h2 id="三、发现问题"><a href="#三、发现问题" class="headerlink" title="三、发现问题"></a>三、发现问题</h2><p>没有带动画的特效播放正常，带动画的特效发现几个问题，比如ui_jiajuchoujiang特效：</p>
<p>1.代码上暂时没有找到更改Animatable Properties属性的接口，只能在Inspector上更改。</p>
<p>2.代码上刚添加UIParticle组件，首次调用RefreshParticles函数刷新没效果。</p>
<p>3.动画控制着材质属性Material._Main Tex_ST，用UIParticle方式播放时，播放的起始时间对不上，一下子全出来没有先后顺序。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/anim3__eYFZGZolQ.gif" class="">
<p>上图，Inspector上添加动画属性_Main Tex_ST，点击Refresh按钮，然后动画属性_Main Tex_ST播放的起始时间不对。</p>
<p>4.当特效下的网格数大于8个时会报警告：Mesh ‘’ has more than the 8 submeshes. Extra submeshes will be ignored.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mesh <span class="string">&#x27;&#x27;</span> has more than the <span class="number">8</span> submeshes. Extra submeshes will be ignored.</span><br><span class="line">UnityEngine.StackTraceUtility:ExtractStackTrace ()</span><br><span class="line">Coffee.UIExtensions.UIParticleUpdater:Refresh (Coffee.UIExtensions.UIParticle) (at Library/PackageCache/com.coffee.ui-particle@<span class="number">5</span>a8f1263ef/Scripts/UIParticleUpdater.cs:<span class="number">85</span>)</span><br><span class="line">Coffee.UIExtensions.UIParticleUpdater:Refresh () (at Library/PackageCache/com.coffee.ui-particle@<span class="number">5</span>a8f1263ef/Scripts/UIParticleUpdater.cs:<span class="number">54</span>)</span><br><span class="line">UnityEngine.Canvas:SendWillRenderCanvases ()</span><br></pre></td></tr></table></figure>
<p>网格数有限制，大于8个会被忽略，但是效果上看不出啥区别，github上有<a target="_blank" rel="noopener" href="https://github.com/mob-sakai/ParticleEffectForUGUI/issues/186" title="提问bug">提问bug</a>，但没有回复。</p>
<h2 id="四、问题分析"><a href="#四、问题分析" class="headerlink" title="四、问题分析"></a>四、问题分析</h2><h3 id="1-为什么粒子材质会同时播放？"><a href="#1-为什么粒子材质会同时播放？" class="headerlink" title="1.为什么粒子材质会同时播放？"></a>1.为什么粒子材质会同时播放？</h3><p>查看源码发现，动画材质属性更改是通过从ParticleSystemRenderer拿出ShadeMaterials和MaterialPropertyBlock，传给CanvasRenderer，根据Inspector设置好的Animatable material ProPerties来更新Canvas上的材质。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/image_NcuDmPJzjI.png" class="">
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/image_ywMcu33ZPf.png" class="">
<p>所以引起问题的是特效的几个节点引用了同一个材质，而这个材质设置数据后，几个节点就同步更新了。</p>
<p>这里应该复制多个同个材质，分别设置上去，观察效果正常了。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/anim4_tx9hVKst4O.gif" class="">
<p>上图引用同个材质，材质同时更新了。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/anim5_GKfO5IVVAN.gif" class="">
<p>上图复制了材质，单独引用，正常了。</p>
<p>为了证实这个问题，可以自制一个UIparticle特效，下面有两种粒子（1白1蓝），都分别引用同一个材质，另外制作一个animator，只改动第一个粒子的材质颜色，由白到黑再到白。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/image_Uj6XZU2I6p.png" class="">
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/image_67GP1vl5zt.png" class="">
<p>animation上只是改了第一个粒子的材质颜色，但是另一个粒子也受到影响。</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/anim6_MAvMAv1XJM.gif" class="">
<h3 id="2-子网格数限制问题"><a href="#2-子网格数限制问题" class="headerlink" title="2.子网格数限制问题"></a>2.子网格数限制问题</h3><p>网格数大于8会出现不渲染元素的情况，下图tiao03、tiao04的渲染位置从排在后面调整为排在前面，两种情况都有元素丢失，但排在前面的显示出来了：</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/anim2_ocvF-p7l04.gif" class="">
<p>暂不清楚为什么要限制8个网格数，使用时注意引用材质不能太多，否则出现显示丢失元素情况。</p>
<p>这个限制估计是CanvasRenderer的限制，写了段测试代码，CanvasRenderer的mesh合并超过8个子网格数：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"> </span><br><span class="line">public class MeshCombineForCanvas : Graphic</span><br><span class="line">&#123;</span><br><span class="line">    private CanvasRenderer m_canvasRenderer ;</span><br><span class="line">    private Mesh m_mesh ;</span><br><span class="line"> </span><br><span class="line">    protected override void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_canvasRenderer) &#123;</span><br><span class="line">            m_canvasRenderer = gameObject.GetComponent&lt;CanvasRenderer&gt;() ?? gameObject.AddComponent&lt;CanvasRenderer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        m_mesh = CreateMesh();</span><br><span class="line">        // CombineMeshes(m_mesh, <span class="number">8</span>);</span><br><span class="line">        CombineMeshes(m_mesh, <span class="number">10</span>);</span><br><span class="line">        m_canvasRenderer.SetMesh(m_mesh);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private Mesh CreateMesh()</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3[] vertices = new Vector3[<span class="number">4</span>];</span><br><span class="line">        vertices[<span class="number">0</span>] = new Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        vertices[<span class="number">1</span>] = new Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        vertices[<span class="number">2</span>] = new Vector3(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        vertices[<span class="number">3</span>] = new Vector3(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        int[] triangles = new int[<span class="number">6</span>];</span><br><span class="line">        triangles[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        triangles[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        triangles[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        triangles[<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        triangles[<span class="number">4</span>] = <span class="number">3</span>;</span><br><span class="line">        triangles[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">        Mesh mesh = new Mesh();</span><br><span class="line">        mesh.vertices = vertices;</span><br><span class="line">        mesh.triangles = triangles;</span><br><span class="line">        <span class="keyword">return</span> mesh;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private void CombineMeshes(Mesh meshContainer, int count)</span><br><span class="line">    &#123;</span><br><span class="line">        CombineInstance[] src = new CombineInstance[count];</span><br><span class="line">        <span class="keyword">for</span> (int i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Mesh mesh = CreateMesh();</span><br><span class="line">            CombineInstance inst = new CombineInstance&#123; mesh = mesh &#125;;</span><br><span class="line">            src[i] = inst;</span><br><span class="line">        &#125;</span><br><span class="line">        meshContainer.CombineMeshes(src, <span class="literal">false</span>, <span class="literal">false</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后同样会报Warning：</p>
<img src="/2022/03/05/UIParticle%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/image_db_KmLvzYS.png" class="">
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UIParticle组件的使用问题&quot;&gt;&lt;a href=&quot;#UIParticle组件的使用问题&quot; class=&quot;headerlink&quot; title=&quot;UIParticle组件的使用问题&quot;&gt;&lt;/a&gt;UIParticle组件的使用问题&lt;/h1&gt;&lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;假如能通过代码，对原本的粒子特效prefab，动态添加UIPartcle组件，并且表现效果和RT一样，这样就能够自动化的优化项目中RT特效。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unity" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E7%89%B9%E6%95%88/"/>
    
    
      <category term="UIParticle" scheme="https://laoleo.github.io/tags/UIParticle/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>ParticleEffectForUGUI（UIParticle）</title>
    <link href="https://laoleo.github.io/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/"/>
    <id>https://laoleo.github.io/2022/01/10/ParticleEffectForUGUI（UIParticle）/</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2022-12-17T13:52:23.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ParticleEffectForUGUI（UIParticle）"><a href="#ParticleEffectForUGUI（UIParticle）" class="headerlink" title="ParticleEffectForUGUI（UIParticle）"></a>ParticleEffectForUGUI（UIParticle）</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>ParticleEffectForUGUI插件，又名UIParticle，为UGUI渲染可遮罩、可排序的粒子特效，而且不需要额外摄像机、RT和Canvas。Unity 2018.2及以上版本支持。</p>
<span id="more"></span>
<p>官方对其的使用和与其他方案对比的优缺点已给出详细说明，了解请访问<a target="_blank" rel="noopener" href="https://github.com/mob-sakai/ParticleEffectForUGUI" title="ParticleEffectForUGUI">ParticleEffectForUGUI</a>。</p>
<p>下面研究如何引入到项目中使用，Unity版本是2019.4.35f1，并且和项目现使用的RT粒子特效方案做性能对比。</p>
<h2 id="二、引入项目"><a href="#二、引入项目" class="headerlink" title="二、引入项目"></a>二、引入项目</h2><h4 id="1-导入package"><a href="#1-导入package" class="headerlink" title="1.导入package"></a>1.导入package</h4><p>使用manifest.json添加依赖方式导入。</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- manifest.json</span><br><span class="line">dependencies:&#123;</span><br><span class="line">  <span class="string">&quot;com.coffee.ui-particle&quot;</span>: <span class="string">&quot;[https://github.com/mob-sakai/ParticleEffectForUGUI.git#3.3.10](https://github.com/mob-sakai/ParticleEffectForUGUI.git#3.3.10)&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>#3.3.10代表版本号。refresh一下就会导入package。</p>
<h4 id="2-添加UIParticle组件"><a href="#2-添加UIParticle组件" class="headerlink" title="2.添加UIParticle组件"></a>2.添加UIParticle组件</h4><p>gameObject右键-UI中可以添加UIParticle组件。</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_2vkN8DyEOU.png" class="">
<p>也可以将目前项目里的UI Effect Prefab转换成用UIParticle的方式，在其根节点上添加UIParticle组件即可。</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_TKk-_imcnM.png" class="">
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_ckbsiwRhQu.png" class="">
<p>两者效果一致，而且UIParticle方式的特效可以自由缩放大小。</p>
<h4 id="3-编写工具类，在lua层加载UIParticle并显示"><a href="#3-编写工具类，在lua层加载UIParticle并显示" class="headerlink" title="3.编写工具类，在lua层加载UIParticle并显示"></a>3.编写工具类，在lua层加载UIParticle并显示</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- UIParticle.lua</span></span><br><span class="line"><span class="built_in">module</span>(<span class="string">&quot;logic.common.ugui.UIParticle&quot;</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">local</span> UIParticle = class(<span class="string">&quot;UIParticle&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:ctor</span><span class="params">(container)</span></span></span><br><span class="line">    <span class="built_in">self</span>._go = container.gameObject</span><br><span class="line">    <span class="built_in">self</span>._loader = PrefabLoader.Get(<span class="built_in">self</span>._go)</span><br><span class="line">    <span class="built_in">self</span>._url = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._goInst = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:load</span><span class="params">(url)</span></span></span><br><span class="line">    <span class="keyword">if</span> GameUtils.isEmptyString(url) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> url == <span class="built_in">self</span>._url <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">self</span>._url = url</span><br><span class="line">    <span class="built_in">self</span>._loader:<span class="built_in">load</span>(url, <span class="built_in">self</span>._onResLoaded, <span class="built_in">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:_onResLoaded</span><span class="params">(loader)</span></span></span><br><span class="line">    <span class="keyword">local</span> goInst = loader <span class="keyword">and</span> loader:getInst()</span><br><span class="line">    <span class="keyword">if</span> goutil.isNil(goInst) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    goutil.addChildToParent(goInst, <span class="built_in">self</span>._go)</span><br><span class="line">    <span class="built_in">self</span>._goInst = goInst</span><br><span class="line">    <span class="built_in">self</span>._comUIParticle = goInst:GetComponent(typeof(Coffee.UIExtensions.UIParticle))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>._effectLoadedCallback <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">self</span>._effectLoadedCallbackObj <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>._effectLoadedCallback(<span class="built_in">self</span>._effectLoadedCallbackObj, goInst, res)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">self</span>._effectLoadedCallback(goInst, res)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--检查美术是否有挂载EffectPlayer的组件</span></span><br><span class="line">    <span class="keyword">local</span> _effectCSComp = goInst:GetComponent(typeof(Pjg.EffectPlayer))</span><br><span class="line">    <span class="keyword">if</span> _effectCSComp <span class="keyword">and</span> <span class="keyword">not</span> goutil.isNil(_effectCSComp) <span class="keyword">then</span></span><br><span class="line">        <span class="comment">--参数默认以组件的，暂不支持外部设置参数</span></span><br><span class="line">        _effectCSComp:AddFinishListener(<span class="built_in">self</span>._onEffectPlayFinish, <span class="built_in">self</span>)</span><br><span class="line">        <span class="comment">--加载好就立即执行play</span></span><br><span class="line">        _effectCSComp:Play()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--暂时没有全部播放完毕逻辑回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:_onEffectPlayFinish</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> goutil.isNil(<span class="built_in">self</span>._go) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>._effectFinishCallback <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">self</span>._effectFinishCallbackObj <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">self</span>._effectFinishCallback(<span class="built_in">self</span>._effectFinishCallbackObj, <span class="built_in">self</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">self</span>._effectFinishCallback()</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:clear</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> goutil.isNil(<span class="built_in">self</span>._goInst) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">--检查美术是否有挂载EffectPlayer的组件</span></span><br><span class="line">    <span class="keyword">local</span> _effectCSComp = <span class="built_in">self</span>._goInst:GetComponent(typeof(Pjg.EffectPlayer))</span><br><span class="line">    <span class="keyword">if</span> _effectCSComp <span class="keyword">and</span> <span class="keyword">not</span> goutil.isNil(_effectCSComp) <span class="keyword">then</span></span><br><span class="line">        _effectCSComp:Stop()</span><br><span class="line">        _effectCSComp:RemoveFinishListener()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:OnDestroy</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>:clear()</span><br><span class="line">    <span class="built_in">self</span>._go = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._loader = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._url = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._goInst = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._effectLoadedCallback = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._effectLoadedCallbackObj = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._effectFinishCallback = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">self</span>._effectFinishCallbackObj = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:getGo</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>._go</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:setEffectLoadedCallback</span><span class="params">(callback, callbackObj)</span></span></span><br><span class="line">    <span class="built_in">self</span>._effectLoadedCallback = callback</span><br><span class="line">    <span class="built_in">self</span>._effectLoadedCallbackObj = callbackObj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:setEffectFinishCallback</span><span class="params">(callback, callbackObj)</span></span></span><br><span class="line">    <span class="built_in">self</span>._effectFinishCallback = callback</span><br><span class="line">    <span class="built_in">self</span>._effectFinishCallbackObj = callbackObj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:play</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> goutil.isNil(<span class="built_in">self</span>._goInst) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">self</span>._goInst.activeSelf <span class="keyword">then</span></span><br><span class="line">        goutil.setActive(<span class="built_in">self</span>._goInst, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    goutil.setActive(<span class="built_in">self</span>._goInst, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">--检查美术是否有挂载EffectPlayer的组件</span></span><br><span class="line">    <span class="keyword">local</span> _effectCSComp = <span class="built_in">self</span>._goInst:GetComponent(typeof(Pjg.EffectPlayer))</span><br><span class="line">    <span class="keyword">if</span> _effectCSComp <span class="keyword">and</span> <span class="keyword">not</span> goutil.isNil(_effectCSComp) <span class="keyword">then</span></span><br><span class="line">        _effectCSComp:Stop()</span><br><span class="line">        _effectCSComp:RemoveFinishListener()</span><br><span class="line">        <span class="comment">--参数默认以组件的，暂不支持外部设置参数</span></span><br><span class="line">        _effectCSComp:AddFinishListener(<span class="built_in">self</span>._onEffectPlayFinish, <span class="built_in">self</span>)</span><br><span class="line">        _effectCSComp:Play()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:setScale</span><span class="params">(scale)</span></span></span><br><span class="line">    <span class="built_in">self</span>._comUIParticle.scale = scale</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UIParticle:setPos</span><span class="params">(x, y, z)</span></span></span><br><span class="line">    GameUtils.setLocalPos(<span class="built_in">self</span>._goInst, x, y, z <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> UIParticle</span><br></pre></td></tr></table></figure>
<p>功能包括加载uiParticle Prefab，改变大小和位置。</p>
<p>测试能够正常显示：</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/uiparticle_wQzXgIMX6n.gif" class="">
<h2 id="三、UIParticle实现原理"><a href="#三、UIParticle实现原理" class="headerlink" title="三、UIParticle实现原理"></a>三、UIParticle实现原理</h2><img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_tl8asSvA18.png" class="">
<p>1.会先将粒子系统的共享材质传给CanvasRenderer</p>
<p>2.在Canvas刷新前事件函数里，将粒子系统的网格经过烘焙后合并，将合并的烘焙网格传给CanvasRenderer.Mesh</p>
<p>3.刷新材质属性时，从粒子系统材质上拿到材质属性数据，根据面板上设置好的动画材质属性类型，依次传给CanvasRenderer上的材质。</p>
<p>4.相同材质的粒子会烘焙成网格并合并，UIParticle在烘焙前会对粒子排序，按材质实例ID、渲染队列、渲染顺序等排序，合并网格时将计算材质的hashCode，相等才能一起合并。</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_Lq8cKHXJpH.png" class="">
<h2 id="四、性能对比"><a href="#四、性能对比" class="headerlink" title="四、性能对比"></a>四、性能对比</h2><p>UIParticle和RT特效方式进行性能对比</p>
<h4 id="1-单个UI粒子特效对比"><a href="#1-单个UI粒子特效对比" class="headerlink" title="1.单个UI粒子特效对比"></a>1.单个UI粒子特效对比</h4><img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_dlKUVIURur.png" class="">
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_-AleO20bJE.png" class="">
<p>左边UIParticle，右边RT。</p>
<p>两者面数一样，UIParticle比RT方式少1个batches，其实差不多。</p>
<p>对比内存：</p>
<p><strong>1.1256*144RT与UIParticle内存占用对比：</strong></p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_CVmGras3MP.png" class="">
<p>256*144的RT特效内存加载情况，rt不是很大，只是占432kb。</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_S5b-ACEJZV.png" class="">
<p>UIParticle内存特效加载后，scene memory只是上涨了0.2MB，而RT特效上涨0.6MB，RT特效占用较大；RT特效的Assets内存也大了0.2MB。</p>
<p>1.2全屏1560*720RT和UIParticle内存占用对比：</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_oZQEU2PqwI.png" class="">
<p>RT特效加载前后内存对比，可以看出加载后scene memory中rt占的内存较大，一张全屏RT占了近13MB。</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_0FbXJEVpBZ.png" class="">
<p>UIParticle特效加载前后对比，加载后scene memory中没有rt，内存上升不多。</p>
<p>对比两者可以看出，particleSystem占的内存都一样，而全屏RT所以占用的内存就更明显了。</p>
<h4 id="2-多个相同UI粒子特效对比"><a href="#2-多个相同UI粒子特效对比" class="headerlink" title="2.多个相同UI粒子特效对比"></a>2.多个相同UI粒子特效对比</h4><img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_2gDEMoHZdN.png" class="">
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_dd56kuGgSY.png" class="">
<p>左边UIParticle，右边RT。</p>
<p>UIParticle方式特效面数比RT多，batches数也比较多。相比下，RT方式更好。</p>
<p>对比内存：</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_tWZrP03QQ1.png" class="">
<p>加载10个UIParticle特效，particleSystem数量增加30（正常），scene memory增加1.6MB，assets增加1.4MB，Other上涨0.02GB。</p>
<img src="/2022/01/10/ParticleEffectForUGUI%EF%BC%88UIParticle%EF%BC%89/image_4Tro4aIdsT.png" class="">
<p>加个10个同个粒子的RT特效，RT增加一个（共用同一个255*144大小RT），scene memory增加0.6MB，assets增加0.2MB，Other上涨0.01GB。</p>
<p>明显多个相同粒子特效，内存方面，RT方式优于UIParticle方式。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><p>UI特效单独显示（比如全屏特效等）的情况，选择UIParticle方式。</p>
</li>
<li><p>UI特效多个相同显示，选择RT方式。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ParticleEffectForUGUI（UIParticle）&quot;&gt;&lt;a href=&quot;#ParticleEffectForUGUI（UIParticle）&quot; class=&quot;headerlink&quot; title=&quot;ParticleEffectForUGUI（UIParticle）&quot;&gt;&lt;/a&gt;ParticleEffectForUGUI（UIParticle）&lt;/h1&gt;&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;p&gt;ParticleEffectForUGUI插件，又名UIParticle，为UGUI渲染可遮罩、可排序的粒子特效，而且不需要额外摄像机、RT和Canvas。Unity 2018.2及以上版本支持。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unity" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E7%89%B9%E6%95%88/"/>
    
    
      <category term="UIParticle" scheme="https://laoleo.github.io/tags/UIParticle/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>UGUIText组件实现图文混排——原理篇</title>
    <link href="https://laoleo.github.io/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/"/>
    <id>https://laoleo.github.io/2021/12/27/UGUIText组件实现图文混排——原理篇/</id>
    <published>2021-12-26T16:00:00.000Z</published>
    <updated>2022-12-07T13:37:07.617Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#ugui-text组件实现图文混排">UGUI Text组件实现图文混排</a><ul>
<li><a href="#实现图文混排原理">实现图文混排原理</a><ul>
<li><a href="#quad标签的使用">quad标签的使用</a></li>
</ul>
</li>
<li><a href="#渲染内嵌图片">渲染内嵌图片</a><ul>
<li><a href="#文字渲染原理">文字渲染原理</a></li>
<li><a href="#流程讲解">流程讲解</a></li>
<li><a href="#代码实现">代码实现</a></li>
</ul>
</li>
<li><a href="#超链接实现">超链接实现</a><ul>
<li><a href="#超链接处理流程">超链接处理流程</a></li>
<li><a href="#响应点击事件">响应点击事件</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="UGUI-Text组件实现图文混排"><a href="#UGUI-Text组件实现图文混排" class="headerlink" title="UGUI Text组件实现图文混排"></a>UGUI Text组件实现图文混排</h1><h2 id="实现图文混排原理"><a href="#实现图文混排原理" class="headerlink" title="实现图文混排原理"></a>实现图文混排原理</h2><p>Unity手册上介绍UI系统和传统的GUI系统都支持<a target="_blank" rel="noopener" href="https://docs.unity3d.com/2017.4/Documentation/Manual/StyledText.html" title="富文本">富文本</a>，Text、GUIStyle、GUIText和TextMesh类上有rich text的设置选项，开启它后Unity会解析文本中标记标签。</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image__hVtRDjd_h.png" class="">
<p>unity中支持的文本标签如下：</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_yhRARumho4.png" class="">
<p>其中quad标签可以渲染出行内内嵌的图片，但是只是对TextMesh组件有效。</p>
<blockquote>
<p>This is only useful for text meshes and renders an image inline with the text.</p>
</blockquote>
<p>TextMesh是用来生成3D图形字体，不能直接用在UI Canvas下。</p>
<blockquote>
<p>Text Meshes can be used for rendering road signs, graffiti etc. The Text Mesh places text in the 3D scene. To make generic 2D text for GUIs, use a <a href="class-GUIText.html" title="GUI Text">GUI Text</a> component instead.</p>
</blockquote>
<p>2D文本渲染需要用GUI Text组件，它属于传统GUI系统，UI系统（即UGUI）下的Text组件也是一样的用途，正如本节开头说到他们都有rich text的设置。</p>
<p>但是UI的文本组件并不支持内嵌的图片，使用quad标签会出现乱码。好在UGUI开源，可以通过重写Text组件以支持渲染内嵌图片的效果。</p>
<h3 id="quad标签的使用"><a href="#quad标签的使用" class="headerlink" title="quad标签的使用"></a>quad标签的使用</h3><blockquote>
<p>\<quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5></p>
</blockquote>
<p>material：渲染组件上引用的材质，值为材质数组的下表，从0开始。</p>
<p>size：决定内嵌图片的像素大小。</p>
<p>x/y/width/height：决定材质贴图上渲染矩形区域的偏移和大小，它们的value代表百分比，类似于uv坐标。</p>
<p>经过测试得知，实际渲染图片大小的关系：图片像素大小 = size *（width/height）。</p>
<p>可以参考这篇<a target="_blank" rel="noopener" href="https://blog.csdn.net/tom_221x/article/details/113456808" title="文章">文章</a>来推测。</p>
<p>使用在UI Text组件上会出现乱码，其实乱码是字体贴图，放大后可以看见贴图上的文字，只不过缩放太小所以看不到。</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_rVuWhoO_3B.png" class="">
<p>打开rich text设置才会解析标签，否则不解析：</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_7M009fCb6d.png" class="">
<h2 id="渲染内嵌图片"><a href="#渲染内嵌图片" class="headerlink" title="渲染内嵌图片"></a>渲染内嵌图片</h2><p>虽然quad在UI上渲染不出图片，但是可以定义渲染区域大小，可以作为占位符。</p>
<p>借助这个特效，渲染内嵌图片可以分三步：</p>
<ol>
<li><p>使用quad标签占位</p>
</li>
<li><p>去除乱码</p>
</li>
<li><p>使用MaskableGraphic类渲染贴图，放置于占位符位置上</p>
</li>
</ol>
<p>项目规定，在渲染贴图之前，需要将所有用到的贴图打到一个spriteAsset上，并且将它引用到UIGraphicTextSprite组件上，UIGraphicTextSprite组件继承MaskableGraphic类，具体使用过程参考这篇<a target="_blank" rel="noopener" href="http://wiki.info/pages/viewpage.action?pageId=13736289" title="文章">文章</a>。</p>
<h3 id="文字渲染原理"><a href="#文字渲染原理" class="headerlink" title="文字渲染原理"></a>文字渲染原理</h3><img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_n9LveM62tZ.png" class="">
<p>1.左边文本会生成100个顶点数据，100来自假设，但顶点数肯定是4的倍数</p>
<p>2.前8个顶点代表两个中文的位置</p>
<p>3.后面的顶点都是quad标签的顶点，但是unity会做处理，只有前4个代表quad标签的区域，后面顶点位置都位于一个点上，不会渲染内容</p>
<h3 id="流程讲解"><a href="#流程讲解" class="headerlink" title="流程讲解"></a>流程讲解</h3><p>UGUI Text组件渲染文字代码流程图：</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_hn-XI1mBjn.png" class="">
<p>重写渲染流程：</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_0ifY5wkaqd.png" class="">
<p>重写渲染流程详细介绍：</p>
<img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_OTeaUItO0F.png" class="">
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>正则表达式匹配quad标签</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Regex m_spriteTagRegex =</span><br><span class="line">          <span class="keyword">new</span> Regex(<span class="string">@&quot;&lt;quad name=(.+?) size=(\d*\.?\d+%?) width=(\d*\.?\d+%?) des=(.+?) /&gt;&quot;</span>, RegexOptions.Singleline);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Match match <span class="keyword">in</span> m_spriteTagRegex.Matches(m_OutputText))</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>清除乱码</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清楚乱码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listTagInfor.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//UGUIText不支持&lt;quad/&gt;标签，表现为乱码，我这里将他的uv全设置为0,清除乱码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> m = listTagInfor[i].index * <span class="number">4</span>; m &lt; listTagInfor[i].index * <span class="number">4</span> + <span class="number">4</span>; m++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//超出可视范围的不会绘制，即leftBottomIndex &gt;= verts.Count。</span></span><br><span class="line">        <span class="comment">//所以这里不需要处理也不应该处理。若处理，则数组越界。</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt;= verts.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UIVertex tempVertex = verts[m];</span><br><span class="line">        tempVertex.uv0 = Vector2.zero;</span><br><span class="line">        verts[m] = tempVertex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成网格数据</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> InlineSpriteInfor</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// 文字的最后的位置</span></span><br><span class="line">      <span class="keyword">public</span> Vector3 textpos;</span><br><span class="line">      <span class="comment">// 4 顶点 </span></span><br><span class="line">      <span class="keyword">public</span> Vector3[] vertices;</span><br><span class="line">      <span class="comment">//4 uv</span></span><br><span class="line">      <span class="keyword">public</span> Vector2[] uv;</span><br><span class="line">      <span class="comment">//6 三角顶点顺序</span></span><br><span class="line">      <span class="keyword">public</span> <span class="built_in">int</span>[] triangles;</span><br><span class="line">      <span class="keyword">public</span> <span class="built_in">bool</span> isEmptySprite;</span><br><span class="line">      <span class="keyword">public</span> Texture texture;</span><br><span class="line">      <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">CalcQuadTag</span>(<span class="params">IList&lt;UIVertex&gt; verts</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      m_AnimSpriteInfo = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, InlineSpriteInfor[]&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过标签信息来设置需要绘制的图片的信息</span></span><br><span class="line">      listSprite = <span class="keyword">new</span> List&lt;InlineSpriteInfor&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listTagInfor.Count; i++)</span><br><span class="line">      &#123;                                                                         <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">          <span class="keyword">var</span> leftBottomIndex = ((listTagInfor[i].index + <span class="number">1</span>) * <span class="number">4</span>) - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (leftBottomIndex &gt;= verts.Count)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          InlineSpriteInfor tempSprite = <span class="keyword">new</span> InlineSpriteInfor();</span><br><span class="line">          tempSprite.name = listTagInfor[i].name;</span><br><span class="line">          tempSprite.isEmptySprite = listTagInfor[i].isEmptySprite;</span><br><span class="line">          </span><br><span class="line">          tempSprite.textpos = verts[leftBottomIndex].position;</span><br><span class="line">          <span class="comment">//设置图片的位置</span></span><br><span class="line">          tempSprite.vertices = <span class="keyword">new</span> Vector3[<span class="number">4</span>];</span><br><span class="line">          tempSprite.vertices[<span class="number">0</span>] = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) + tempSprite.textpos;</span><br><span class="line">          tempSprite.vertices[<span class="number">1</span>] = <span class="keyword">new</span> Vector3(listTagInfor[i].size.x, listTagInfor[i].size.y, <span class="number">0</span>) + tempSprite.textpos;</span><br><span class="line">          tempSprite.vertices[<span class="number">2</span>] = <span class="keyword">new</span> Vector3(listTagInfor[i].size.x, <span class="number">0</span>, <span class="number">0</span>) + tempSprite.textpos;</span><br><span class="line">          tempSprite.vertices[<span class="number">3</span>] = <span class="keyword">new</span> Vector3(<span class="number">0</span>, listTagInfor[i].size.y, <span class="number">0</span>) + tempSprite.textpos;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//计算其uv</span></span><br><span class="line">          Sprite sprite;</span><br><span class="line">          m_nameToSpriteDict.TryGetValue(listTagInfor[i].name, <span class="keyword">out</span> sprite);</span><br><span class="line">          Rect spriteRect = sprite.textureRect;</span><br><span class="line">          Texture texSource = sprite.texture;</span><br><span class="line">          tempSprite.texture = texSource;</span><br><span class="line">          Vector2 texSize = <span class="keyword">new</span> Vector2(texSource.width, texSource.height);</span><br><span class="line">          tempSprite.uv = <span class="keyword">new</span> Vector2[<span class="number">4</span>];</span><br><span class="line">          tempSprite.uv[<span class="number">0</span>] = <span class="keyword">new</span> Vector2(spriteRect.x / texSize.x, spriteRect.y / texSize.y);</span><br><span class="line">          tempSprite.uv[<span class="number">1</span>] = <span class="keyword">new</span> Vector2((spriteRect.x + spriteRect.width) / texSize.x, (spriteRect.y + spriteRect.height) / texSize.y);</span><br><span class="line">          tempSprite.uv[<span class="number">2</span>] = <span class="keyword">new</span> Vector2((spriteRect.x + spriteRect.width) / texSize.x, spriteRect.y / texSize.y);</span><br><span class="line">          tempSprite.uv[<span class="number">3</span>] = <span class="keyword">new</span> Vector2(spriteRect.x / texSize.x, (spriteRect.y + spriteRect.height) / texSize.y);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//声明三角顶点所需要的数组</span></span><br><span class="line">          tempSprite.triangles = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">6</span>];</span><br><span class="line">          listSprite.Add(tempSprite);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>渲染贴图</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawSprite</span>(<span class="params">UIGraphicTextSprites spriteGraphic, List&lt;InlineSpriteInfor&gt; listInlineSprite</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> spriteCanvasRenderer = spriteGraphic.GetComponentInChildren&lt;CanvasRenderer&gt;();</span><br><span class="line">  <span class="keyword">if</span> (m_spriteMesh == <span class="literal">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    m_spriteMesh = <span class="keyword">new</span> Mesh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (drawSpriteVertices == <span class="literal">null</span>) drawSpriteVertices = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line">  <span class="keyword">else</span> drawSpriteVertices.Clear();</span><br><span class="line">  <span class="keyword">if</span> (drawSpriteUv == <span class="literal">null</span>) drawSpriteUv = <span class="keyword">new</span> List&lt;Vector2&gt;();</span><br><span class="line">  <span class="keyword">else</span> drawSpriteUv.Clear();</span><br><span class="line">  <span class="keyword">if</span> (drawSpriteTriangles == <span class="literal">null</span>) drawSpriteTriangles = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  <span class="keyword">else</span> drawSpriteTriangles.Clear();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listInlineSprite.Count; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">var</span> inlineSprite = listInlineSprite[i];</span><br><span class="line">      <span class="keyword">if</span> (inlineSprite.isEmptySprite) </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; inlineSprite.vertices.Length; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          drawSpriteVertices.Add(inlineSprite.vertices[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; inlineSprite.uv.Length; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          drawSpriteUv.Add(inlineSprite.uv[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; inlineSprite.triangles.Length; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          drawSpriteTriangles.Add(inlineSprite.triangles[j]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算顶点绘制顺序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; drawSpriteTriangles.Count; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (i % <span class="number">6</span> == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> num = i / <span class="number">6</span>;</span><br><span class="line">          drawSpriteTriangles[i] = <span class="number">0</span> + <span class="number">4</span> * num;</span><br><span class="line">          drawSpriteTriangles[i + <span class="number">1</span>] = <span class="number">1</span> + <span class="number">4</span> * num;</span><br><span class="line">          drawSpriteTriangles[i + <span class="number">2</span>] = <span class="number">2</span> + <span class="number">4</span> * num;</span><br><span class="line"></span><br><span class="line">          drawSpriteTriangles[i + <span class="number">3</span>] = <span class="number">1</span> + <span class="number">4</span> * num;</span><br><span class="line">          drawSpriteTriangles[i + <span class="number">4</span>] = <span class="number">0</span> + <span class="number">4</span> * num;</span><br><span class="line">          drawSpriteTriangles[i + <span class="number">5</span>] = <span class="number">3</span> + <span class="number">4</span> * num;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  m_spriteMesh.vertices = drawSpriteVertices.ToArray ();</span><br><span class="line">  m_spriteMesh.uv = drawSpriteUv.ToArray ();</span><br><span class="line">  m_spriteMesh.triangles = drawSpriteTriangles.ToArray ();</span><br><span class="line">  </span><br><span class="line">  spriteCanvasRenderer.SetMesh(m_spriteMesh);</span><br><span class="line">  spriteGraphic.UpdateMaterial();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态图片是按一定频率切换主贴图和网格数据实现的</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> fTime = <span class="number">0.0f</span>;</span><br><span class="line"><span class="comment">//int iIndex = 0;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(listSprite == <span class="literal">null</span> || listSprite.Count==<span class="number">0</span> || m_hasAnimTag==<span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">fTime += Time.deltaTime;</span><br><span class="line"><span class="keyword">if</span> (fTime &gt;= DynamicTagSwitchInterval)</span><br><span class="line">&#123;</span><br><span class="line">        UpdateAnimSprite();</span><br><span class="line">  fTime = <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateAnimSprite</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_AnimIndex.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> animIndex = m_AnimIndex[i];</span><br><span class="line">        <span class="keyword">if</span> (!m_AnimSpriteInfo.ContainsKey(animIndex)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        m_AnimSpriteStep[animIndex]++;</span><br><span class="line">        <span class="keyword">if</span> (m_AnimSpriteStep[animIndex] &gt;= m_AnimSpriteInfo[animIndex].Length)</span><br><span class="line">        &#123;</span><br><span class="line">            m_AnimSpriteStep[animIndex] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> step = m_AnimSpriteStep[animIndex];</span><br><span class="line">        <span class="keyword">var</span> inlineSprite = m_AnimSpriteInfo[animIndex][step];</span><br><span class="line">        Sprite sprite;</span><br><span class="line">        m_nameToSpriteDict.TryGetValue(inlineSprite.name, <span class="keyword">out</span> sprite);</span><br><span class="line">        <span class="keyword">var</span> spriteGraphic = m_spriteGraphicArray[animIndex];</span><br><span class="line">        spriteGraphic.SetMainTexture(sprite.texture);</span><br><span class="line">        DrawSprite(spriteGraphic, <span class="keyword">new</span> List&lt;InlineSpriteInfor&gt;()&#123;inlineSprite&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="超链接实现"><a href="#超链接实现" class="headerlink" title="超链接实现"></a>超链接实现</h2><h3 id="超链接处理流程"><a href="#超链接处理流程" class="headerlink" title="超链接处理流程"></a>超链接处理流程</h3><img src="/2021/12/27/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E5%8E%9F%E7%90%86%E7%AF%87/image_TwT2GLPl7b.png" class="">
<h3 id="响应点击事件"><a href="#响应点击事件" class="headerlink" title="响应点击事件"></a>响应点击事件</h3><ol>
<li><p>UIGraphicText组件继承IPointerClickHandler接口，实现OnPointerClick方法</p>
</li>
<li><p>RectTransformUtility.ScreenPointToLocalPointInRectangle方法将屏幕坐标转成local坐标</p>
</li>
<li><p>判断是否点击在包围盒上，从而响应预先绑定的点击事件</p>
</li>
</ol>
<p>源代码</p>
<p><a href="UGUIText组件实现图文混排——原理篇/UIGraphicText__lKh67xRzm.cs">UIGraphicText.cs</a></p>
<p><a href="UGUIText组件实现图文混排——原理篇/UIGraphicTextSpritesMgr_VeAnnPQruV.cs">UIGraphicTextSpritesMgr.cs</a></p>
<p><a href="UGUIText组件实现图文混排——原理篇/EmojiSpriteAsset_m_7Wcnb4Es.cs">EmojiSpriteAsset.cs</a></p>
<p><a href="UGUIText组件实现图文混排——原理篇/UIGraphicTextSprites_SJ0ts213El.cs">UIGraphicTextSprites.cs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ugui-text组件实现图文混排&quot;&gt;UGUI Text组件
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="业务系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="图文混排" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
    
      <category term="emoji" scheme="https://laoleo.github.io/tags/emoji/"/>
    
      <category term="图文混排" scheme="https://laoleo.github.io/tags/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>图文混排-支持多个不同emoji来自不同图集和散图</title>
    <link href="https://laoleo.github.io/2021/11/11/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%962/"/>
    <id>https://laoleo.github.io/2021/11/11/UGUIText组件实现图文混排——项目优化2/</id>
    <published>2021-11-10T16:00:00.000Z</published>
    <updated>2022-12-07T13:37:02.710Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h1 id="图文混排-支持多个不同emoji来自不同图集和散图"><a href="#图文混排-支持多个不同emoji来自不同图集和散图" class="headerlink" title="图文混排-支持多个不同emoji来自不同图集和散图"></a>图文混排-支持多个不同emoji来自不同图集和散图</h1><p>之前针对表情不支持多图集的问题优化过一板，可以回顾下这篇文章：<a href="./UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96.md">UIGraphicText组件表情渲染优化-支持表情来之不同图集</a></p>
<p>但后来发现图文混排场景不支持多个不同emoji来自不同图集和散图，下面是问题描述。</p>
<p>PC下不打图集下发现，多个不同的emoji标签显示同一个emoji sprite。</p>
<p><img src="UGUIText组件实现图文混排——项目优化2/4c1118d6cb20ce80f3105b95502455c3.tmp" alt="C:\\88534cc8db9f6423fece8da47e598d32"><img src="UGUIText组件实现图文混排——项目优化2/7975d77768f66dd5b45d9ef03f066e45.tmp" alt="C:\\53fba21b5a4b310d26e01fbc92b36a2e"></p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a><strong>原因分析</strong></h2><p>每个text组件下只分配一个maskableGraphic组件，如其名可遮罩图形，该组件可以根据uv坐标来截取自身mainTexture上的区域，以渲染emoji。</p>
<p>当不打图集，uv坐标就代表整个mainTexture，也就是整张单图，而mainTexture同一时刻只能代表一张单图。</p>
<p>所以在这个例子中，所有的emoji都显示同一张图。</p>
<p>按照这个原理，即使在打图集的情况下，假如一行消息上的emoji并不是都来自同一个图集，那么显示上也会出问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h2><p>这个问题的瓶颈在于maskableGraphic组件的数量，可以根据不同的texture来分配maskableGraphic组件来渲染emoji，这样就可以支持同时显示来自不同texture的emoji。</p>
<p>问题分拆：</p>
<ol>
<li>分组，按sprite的texture的不同来决定分配UIGraphiTextSprites组件（继承maskableGraphic），每个UIGraphiTextSprites组件负责渲染这个texture的emoji。</li>
<li>重构drawSprites方法逻辑以支持分组渲染emoji</li>
<li>处理Update逻辑以支持渲染动图</li>
</ol>
<p>但实践结果发现，按texture不同来分配maskableGraphic组件的方式并不适用于多个动图（动图即多个sprite切换）的情况，比如不打图集情况下有两个一样的动图emoji，当动图切换sprite texture时候，因为按texture分配组件所以两个一样的动图emoji只分配一个组件，前一个emoji会被后一个emoji抢占组件而不渲染。</p>
<p><img src="UGUIText组件实现图文混排——项目优化2/1b068870d1847acdd585381f49f9127c.tmp" alt="C:\\7a9f240bac4cb3c6c539f8bad0891c12"><img src="UGUIText组件实现图文混排——项目优化2/b1ea6bccc642c35685b0dd0f5671b303.tmp" alt="C:\\ad1a89e4b9b73f312118b21ca07bab28"></p>
<p>所以最终的方案为：</p>
<ol>
<li>区分静图和动图的emoji，静图的emoji按texture分配UIGraphiTextSprites组件</li>
<li>动图的emoji分配单独一个UIGraphiTextSprites组件负责渲染</li>
<li>UIGraphicTextSpritesMgr池化UIGraphiTextSprites组件，避免在消息列表界面频繁创建和销毁组件</li>
</ol>
<p>分配策略代码如下：</p>
<p>展开源码</p>
<p>UIGraphicTextSprites[] m_spriteGraphicArray;</p>
<p>private void DistributeTextSprite(List\&lt;SpriteTagInfor> listTag)</p>
<p>{</p>
<p>var staticEmojiDict = new Dictionary\&lt;Texture, List\&lt;int>>();</p>
<p>for (var i=0;i\&lt;listTag.Count;i++)</p>
<p>{</p>
<p>var tagInfor = listTag[i];</p>
<p>var animTagArray = m_AnimSpriteTag[i];</p>
<p>if (animTagArray.Length>1)</p>
<p>{</p>
<p>var textSprite = CreateTextSprite();</p>
<p>m_spriteGraphicArray[i] = textSprite;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>var sprite = m_nameToSpriteDict[tagInfor.name];</p>
<p>if (!staticEmojiDict.ContainsKey(sprite.texture)) {</p>
<p>staticEmojiDict[sprite.texture] = new List\&lt;int>(){i};</p>
<p>}</p>
<p>staticEmojiDict[sprite.texture].Add(i);</p>
<p>}</p>
<p>}</p>
<p>// staticEmojiDict：{texture1=>{1，3}}</p>
<p>foreach (var item in staticEmojiDict)</p>
<p>{</p>
<p>var textSprite = CreateTextSprite();</p>
<p>foreach(var index in item.Value)</p>
<p>{</p>
<p>m_spriteGraphicArray[index] = textSprite;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a><strong>具体实现</strong></h2><p>下面以渲染emoji的流程图来讲解讲解改造的过程。</p>
<img src="/2021/11/11/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%962/ebee4d8b9fab274fef93b95923e20796.tmp" class="" title="C:\\97daee51e2a0dadd426d08e8b46ba127">
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h2><p>1.OnPopulateMesh中控制gameObject的slefActive会导致报错，与onLogCallBack有冲突。</p>
<img src="/2021/11/11/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%962/949ad5756a5f0697641e2267e54b6a2a.tmp" class="" title="C:\\c8e64b17c775c1a4b44a6a7a6a6354ce">
<p>“Trying to add…… while we are already inside a graphic rebuild loop.”这句是UGUI的报错，查看了UGUI的源码发现：</p>
<p>canvas刷新时，会将标记为dirty的UIElement重新构建，graphic类会生成网格时调用OnPopulateMesh。</p>
<p>这个时候Graphic类不能更改，更改会让canvas标记setDirty加入到待构建队列，而且在canvas刷新时不能禁止入队，所以报了这个错。</p>
<p>下面是UGUI的源码：</p>
<p><img src="UGUIText组件实现图文混排——项目优化2/889d57042c9cc1a988458e23e9617d0d.tmp" alt="C:\\8671ab9a5ec1a5f297a33d24684e119b"><img src="UGUIText组件实现图文混排——项目优化2/1ed8f3c55e63efc72047784eb2d715ec.tmp" alt="C:\\3b0528cdf5e8756c32cae65ffba1311a"><img src="UGUIText组件实现图文混排——项目优化2/35ae882a0e5fee85b1b7a102ba20976f.tmp" alt="C:\\11e53b162bb563663b032f919afcab4a"></p>
<p>即在OnPopulateMesh方法里不能执行setActive方法，可以放在base.SetCVerticesDirty方法里做。</p>
<p>2.重用cell的带sprite的text没有更新文本，只是调用了disable后调了enable，log：</p>
<p>因为是base.SetVertivesDirty方法前提前返回了，没有加入到canvas的待更新队列不会更新图形，所以不能这样做。</p>
<p>下面是引起错误的代码：</p>
<img src="/2021/11/11/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%962/83146e7e3d81e80b54edf6131d3203e2.tmp" class="" title="C:\\56a7b0dce321c762d3affc70752c805e">
<h2 id="测试与规范"><a href="#测试与规范" class="headerlink" title="测试与规范"></a><strong>测试与规范</strong></h2><p>兼容性排查，排查修改类被引用到的地方是否正常？</p>
<p>修改了UIGraphicText类和UIGraphicTextSprites类，两者在项目中引用我排查过，变更代码不会引起错误，但UIGraphicTextSprites类属于submodule的框架层，不知其他项目的情况。</p>
<p>测试案例如下：</p>
<p><img src="UGUIText组件实现图文混排——项目优化2/584310e308f30ee963734e6004db68f7.tmp" alt="C:\\b7c4a0986ebdf75c5ef2bda9f54b15cf"><img src="UGUIText组件实现图文混排——项目优化2/4e5d287689f65ab1fab2db8cc848f218.tmp" alt="C:\\b40295cf6f4f0fca2550c102727d03d9"></p>
<p>观察在各个平台上打不打图集的表现情况：</p>
<table>
<thead>
<tr>
<th><strong>测试平台</strong></th>
<th><strong>是否打图集</strong></th>
<th><strong>结果（emoji、多个emoji、动图emoji、动图）</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Unity</td>
<td>不打</td>
<td>正常</td>
</tr>
<tr>
<td>Unity</td>
<td>打</td>
<td>正常</td>
</tr>
<tr>
<td>安卓</td>
<td>打</td>
<td>正常</td>
</tr>
<tr>
<td>IOS</td>
<td>打</td>
<td>正常</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;图文混排-支持多个不同emoji来自不同图集和散图&quot;&gt;&lt;a href=&quot;#图文混排-支持多个不同emoji来自不同图集和散图&quot; class=&quot;headerlink&quot; title=&quot;图文混排-支持多个不同emoji来自
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="业务系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="图文混排" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
    
      <category term="emoji" scheme="https://laoleo.github.io/tags/emoji/"/>
    
      <category term="图文混排" scheme="https://laoleo.github.io/tags/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>游戏热更新</title>
    <link href="https://laoleo.github.io/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://laoleo.github.io/2021/09/10/游戏热更新/</id>
    <published>2021-09-09T16:00:00.000Z</published>
    <updated>2022-12-07T13:35:55.741Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h1 id="游戏热更新"><a href="#游戏热更新" class="headerlink" title="游戏热更新"></a>游戏热更新</h1><h2 id="version数据解析"><a href="#version数据解析" class="headerlink" title="version数据解析"></a>version数据解析</h2><p>在本地打包时会有跳过热更新或者测试热更新的需求，但没有文档解析打包界面version相关选项的作用，也不知道登录界面版本字符串的含义，所以这篇文章对打包过程的version相关参数和选项作详细解析，以及简单讲解游戏包更新流程。</p>
<img src="/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/image.png" class="">
<img src="/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/image_1.png" class="">
<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ul>
<li>Build Package的Version：仅用作展示，作为游戏登录界面的版本字符串的一部分。</li>
<li>Build Package的VersionCode：作为GameConst.txt里的NativeVersionCode，用来更新包外的GameConst.txt。当包内与包外的GameConst里的NativeVersionCode不同时，会覆盖外部GameConst.txt文件。另一个作用是作为请求remoteVersionManifest文件获取最新版本号的参数。</li>
<li>游戏常量配置的游戏是否启用热更新：对应GameConst.txt的gameOpenHotUpdate字段，可以忽略Version而跳过热更。</li>
</ul>
<img src="/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/image_2.png" class="">
<ul>
<li>登录界面的版本字符串分为MSDK和非MSDK格式，区别就是MSDK格式多了腾讯热更版本号，对游戏更新逻辑没影响。<ul>
<li>MSDK格式：V{msdkVersion}-{LocalVersion}-{VersionName}-{VersionCode}</li>
<li>非MSDK格式：V{LocalVersion}-{VersionName}-{VersionCode}</li>
</ul>
</li>
</ul>
<p>LocalVersion用于对比remoteVersion决定更新，VersionName对应Build Package的Version，VersionCode对应Build Package的VersionCode。</p>
<p>LocalVersion的值记录于Assets\Resources\version.manifest文件中</p>
<img src="/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/image_3.png" class="">
<h2 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h2><img src="/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/image_4.png" class="">
<p>版本号a.b.c各级的作用：</p>
<img src="/2021/09/10/%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0/image_5.png" class="">
<h2 id="热更线程代码"><a href="#热更线程代码" class="headerlink" title="热更线程代码"></a>热更线程代码</h2><p><a href="游戏热更新/DownloadThread.cs">DownloadThread.cs</a></p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// downloadFile用子线程实现，new Thread(new ThreadStart(RunDownloading))</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">DownloadThread</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (!_isStop || _thread != <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          CLogger.Log(<span class="string">&quot;DownloadThread::Start() - Download Thread Already Started:&quot;</span> + !_isStop + <span class="string">&quot;#thread:&quot;</span> + ((_thread == <span class="literal">null</span>) ? <span class="string">&quot;null&quot;</span> : _thread.ManagedThreadId.ToString()));</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _isStop = <span class="literal">false</span>;</span><br><span class="line">      _thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(RunDownloading));</span><br><span class="line">      CLogger.Log(<span class="string">&quot;DownloadThread::Start() - Create Download Thread:&quot;</span> + _thread.ManagedThreadId);</span><br><span class="line">      _thread.IsBackground = <span class="literal">true</span>; <span class="comment">// 设置为后台线程，确保当主线程退出时该线程也会结束</span></span><br><span class="line">      _thread.Start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunDownloading</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (; ; )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_isStop)</span><br><span class="line">                &#123;</span><br><span class="line">                    CLogger.Log(<span class="string">&quot;DownloadThread::RunDownloading() - Download Thread Meet Stop Flag,ThreadId:&quot;</span> + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (_currentTask == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">lock</span> (_pendingTasks)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> num = _pendingTasks.Count;</span><br><span class="line">                        <span class="keyword">if</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            _currentTask = _pendingTasks.Dequeue();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            _isWaitting = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">this</span>.Wait();</span><br><span class="line">                            _isWaitting = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!_isStop &amp;&amp; _currentTask != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//Debug.Log (&quot;StartDownload&quot;);</span></span><br><span class="line">                    <span class="comment">// 开始断点续传下载文件</span></span><br><span class="line">                    DownloadFromBreakPoint(_currentTask);</span><br><span class="line">                    <span class="comment">//Debug.Log (&quot;EndDownload&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>lock关键字</p>
<p>IEquatasble <a target="_blank" rel="noopener" href="https://www.cnblogs.com/lian--ying/p/9502879.html">https://www.cnblogs.com/lian–ying/p/9502879.html</a></p>
<h3 id="C-多线程编程"><a href="#C-多线程编程" class="headerlink" title="C#多线程编程"></a>C#多线程编程</h3><p><a target="_blank" rel="noopener" href="http://images.china-pub.com/ebook4610001-4615000/4613657/ch01.pdf">http://images.china-pub.com/ebook4610001-4615000/4613657/ch01.pdf</a></p>
<p><a target="_blank" rel="noopener" href="http://apps.mxinfos.com/电子书籍/多线程编程.pdf">http://apps.mxinfos.com/电子书籍/多线程编程.pdf</a></p>
<h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>下载热更文件使用了<strong>断点续传</strong>，原因是当下载大文件中途断网或退出时，可以保证下次更新在上次下载进度基础上继续正常下载。</p>
<p>断点续传需要服务端支持，需支持允许分段方式请求的文件数据。</p>
<p>使用http协议头字段range告知服务器下载文件字节数据范围值，例如：range:bytes=500-1000。配合If-Range:Etag/if-modified判断文件是否发生变化。详细看考这篇<a target="_blank" rel="noopener" href="https://www.jianshu.com/p/e8dee3dbc409">文章</a>。</p>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line"><span class="keyword">if</span> (File.Exists(task.storagePath))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.从已下载部分数据的文件统计已下载字节数、剩余下载字节数</span></span><br><span class="line">    <span class="keyword">using</span> (FileStream fileStream = <span class="keyword">new</span> FileStream(task.storagePath, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))</span><br><span class="line">    &#123;</span><br><span class="line">        receivedLength = fileStream.Length;</span><br><span class="line">        toDownloadLength = totalLength - receivedLength;</span><br><span class="line">        fileStream.Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (receivedLength != dfi.receivedSize)</span><br><span class="line">    &#123;</span><br><span class="line">        CLogger.Log(<span class="built_in">string</span>.Format(<span class="string">&quot;DownloadThread::DownloadFromBreakPoint() - break point save receive size is wrong for file[&#123;0&#125;], saveSize=&#123;1&#125;, fileSize=&#123;2&#125;&quot;</span>, _currentTaskFileName, dfi.receivedSize, receivedLength));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task.fileLength = totalLength;</span><br><span class="line">task.receivedLength = receivedLength;</span><br><span class="line">_currentTaskTotalBytes = totalLength;</span><br><span class="line">_currentTaskReceivedBytes = receivedLength;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> transferOkay = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (toDownloadLength &gt; <span class="number">0L</span>)</span><br><span class="line">&#123;</span><br><span class="line">    CLogger.Log(<span class="string">&quot;DownloadThread::DownloadFromBreakPoint() - start http download, The request url is [&quot;</span> + uri + <span class="string">&quot;] with range [&quot;</span> + receivedLength + <span class="string">&quot;,&quot;</span> + totalLength + <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">    HttpWebRequest request2 = (HttpWebRequest)WebRequest.Create(uri);</span><br><span class="line">    request2.Timeout = kTimeOut;</span><br><span class="line">    request2.KeepAlive = <span class="literal">true</span>;</span><br><span class="line">    request2.ReadWriteTimeout = kTimeOut;</span><br><span class="line">    request2.AddRange((<span class="built_in">int</span>)receivedLength, (<span class="built_in">int</span>)totalLength);</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response2 = (HttpWebResponse)request2.GetResponse();</span><br><span class="line">    transferOkay = <span class="keyword">this</span>.ReadBytesFromResponse(task, response2);</span><br><span class="line">    response2.Close();</span><br><span class="line">    request2.Abort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (transferOkay)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.OnDownloadFinished(task, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取数据存储进文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">ReadBytesFromResponse</span>(<span class="params">DownloadTask task, WebResponse response</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> okay = <span class="literal">false</span>;</span><br><span class="line">    DownloadFileTransferInfo fileInfo = _transferMgr.GetDownloadFileInfo(task.file);</span><br><span class="line">    FileUtils.Instance.CheckDirExistsForFile(task.storagePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (FileStream fileStream = <span class="keyword">new</span> FileStream(task.storagePath, task.receivedLength == <span class="number">0</span> ? FileMode.Create : FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 3.设置文件流的起始指针为已收到的字节大小</span></span><br><span class="line">      fileStream.Position = task.receivedLength;</span><br><span class="line">      <span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="keyword">using</span> (Stream responseStream = response.GetResponseStream())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> bytesRead = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> (task.receivedLength &lt; task.fileLength)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">// 4.读写流把数据从respone体中读出并写入到目标文件中</span></span><br><span class="line">              bytesRead = responseStream.Read(array, <span class="number">0</span>, array.Length);</span><br><span class="line">              fileStream.Write(array, <span class="number">0</span>, bytesRead);</span><br><span class="line">              task.receivedLength += bytesRead;</span><br><span class="line">              _currentTaskReceivedBytes = task.receivedLength;</span><br><span class="line"></span><br><span class="line">              _transferMgr.UpdateFileTransferProgress(fileInfo, task.receivedLength);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          okay = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (task.receivedLength != task.fileLength)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">string</span> s = <span class="built_in">string</span>.Format(<span class="string">&quot;DownloadThread::ReadBytesFromResponse() - Download length not fit Error:&#123;0&#125;/&#123;1&#125;&quot;</span>, task.receivedLength, task.fileLength);</span><br><span class="line">          CLogger.LogError(s);</span><br><span class="line">          okay = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">this</span>.OnDownloadFinished(task, <span class="keyword">new</span> Exception(s));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> okay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面断点续传的是ab文件，下面续传zip文件：</p>
<p><a href="游戏热更新/BreakpointTransferZip.cs">BreakpointTransferZip.cs</a></p>
<h2 id="热更包与基线"><a href="#热更包与基线" class="headerlink" title="热更包与基线"></a>热更包与基线</h2><h3 id="热更文件检出"><a href="#热更文件检出" class="headerlink" title="热更文件检出"></a>热更文件检出</h3><p>热更包的资源文件通过对比两个版本的资源变更情况得出</p>
<p>用git对比？选出具有相同目录结构文件？</p>
<p>网上的一般方式是用<strong>MD5</strong>检出变更的文件，服务器会下发最新版文件的MD5信息，用之和本地文件MD5对比。</p>
<p>应不用选出具有相同目录结构的文件包，服务端会下发热更文件的相对存储路径。</p>
<p><strong>基线怎么来呢？</strong></p>
<p>很简单，记录上一次打包的所有ab到cache文件即可。百田热更基线记录abCache的时机为每次发热更包后，腾讯的则是发整包版本后。</p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;游戏热更新&quot;&gt;&lt;a href=&quot;#游戏热更新&quot; class=&quot;headerlink&quot; title=&quot;游戏热更新&quot;&gt;&lt;/a&gt;游戏热更新&lt;/h1&gt;&lt;h2 id=&quot;version数据解析&quot;&gt;&lt;a href=&quot;#versio
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="热更新" scheme="https://laoleo.github.io/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>射箭小游戏</title>
    <link href="https://laoleo.github.io/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>https://laoleo.github.io/2021/06/22/射箭小游戏/</id>
    <published>2021-06-21T16:00:00.000Z</published>
    <updated>2022-12-07T13:35:47.417Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h1 id="射箭小游戏"><a href="#射箭小游戏" class="headerlink" title="射箭小游戏"></a>射箭小游戏</h1><img src="/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/image_bPic0MSA86.png" class="">
<h3 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h3><p>属于2D游戏，没有深度，碰撞检测采用判断两线段是否相交的方法，即箭头两帧之间位置线段与箭靶中心为原点的xy轴中心线两线段。</p>
<img src="/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/image_jB99fdiEFy.png" class="">
<p>之所以选择这种判断方法，是因为中靶的位置是算分数的一个因素，不能像射气球那种带碰撞盒的方式，箭进入碰撞盒后就会立刻停止。这样的得分效果不好，只能拿到击中边缘的3分。</p>
<p>假如两帧的线段同时与两中心线相交，优先取与y轴平行的中心线交点，因为箭停留在靶上的效果较好。</p>
<p>实际效果发现与x轴平行的右半段，会很大概率挡住箭射中Y轴中心线，这样效果不好。右半段是为了托住箭避免没中Y轴线而穿靶，所以可以加个检测前提。</p>
<h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>判断二维平面两线段是否相交代码：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求线段交点，以解线性方程组的方式</span></span><br><span class="line"><span class="comment">-- @param p0 Vector2</span></span><br><span class="line"><span class="comment">-- @return 线段是否相交,交点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GameUtils.calcIntersectionOfLinear2D</span><span class="params">(p0, p1, p2, p3)</span></span></span><br><span class="line">    <span class="comment">-- 直线的一般方程为F(x) = ax + by + c = 0</span></span><br><span class="line">    <span class="comment">-- 已知两点可得：a = y0 – y1, b = x1 – x0, c = x0y1 – x1y0</span></span><br><span class="line">    <span class="comment">-- 可推出两直线交点：</span></span><br><span class="line">    <span class="comment">-- x = (b0*c1 – b1*c0)/D</span></span><br><span class="line">    <span class="comment">-- y = (a1*c0 – a0*c1)/D</span></span><br><span class="line">    <span class="comment">-- D = a0*b1 – a1*b0， (D为0时，表示两直线重合)</span></span><br><span class="line">    <span class="keyword">local</span> a0=p0.y-p1.y</span><br><span class="line">  <span class="keyword">local</span> b0=p1.x-p0.x</span><br><span class="line">  <span class="keyword">local</span> c0=p0.x*p1.y-p0.y*p1.x</span><br><span class="line">    <span class="keyword">local</span> a1=p2.y-p3.y</span><br><span class="line">  <span class="keyword">local</span> b1=p3.x-p2.x</span><br><span class="line">  <span class="keyword">local</span> c1=p2.x*p3.y-p2.y*p3.x</span><br><span class="line">    <span class="keyword">local</span> D=a0*b1-a1*b0</span><br><span class="line">    <span class="keyword">if</span> D == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> x=(b0*c1-b1*c0)/D</span><br><span class="line">    <span class="keyword">local</span> y=(c0*a1-c1*a0)/D</span><br><span class="line">    <span class="comment">-- 判断交点是否在两条线段上</span></span><br><span class="line">    <span class="keyword">local</span> EPSINON = <span class="number">0.000001</span> <span class="comment">--浮点数相减的结果的不精确问题</span></span><br><span class="line">    <span class="keyword">if</span> (x - p0.x) * (x - p1.x) &lt;= EPSINON <span class="keyword">and</span> </span><br><span class="line">        (y - p0.y) * (y - p1.y) &lt;= EPSINON <span class="keyword">and</span> </span><br><span class="line">        (x - p2.x) * (x - p3.x) &lt;= EPSINON <span class="keyword">and</span> </span><br><span class="line">        (y - p2.y) * (y - p3.y) &lt;= EPSINON </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>, Vector2.New(x, y)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>, Vector2.New(x, y)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在实现线段的碰撞检测中踩了些坑，总结两点注意点：</p>
<ol>
<li>两帧之间的位置坐标点不要采取预测下一帧位置的方式，而是保留上一帧位置。因为用默认一帧deltaTime（约0.034,30帧）预测下一帧位置，可能由于卡帧导致跟实际下一帧的位置出现带有隐患的相差，假如这个相差的距离刚好包含了中心位置，就会出现穿透现象。写这么长，不如画个图：</li>
</ol>
<img src="/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/image_fNhLsjLAng.png" class="">
<ol>
<li>浮点数运算精度缺失问题。坐标点的值时浮点数，判断相等时候要注意，不能使用全等，即使两个相等浮点数相减不一定每次都等于0，使用允许误差范围判断math.abs(a -b) &lt; c，c为使用场景下允许的最大误差.</li>
</ol>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x - p0.x) * (x - p1.x) &lt;= <span class="number">0</span> <span class="keyword">and</span> </span><br><span class="line">        (y - p0.y) * (y - p1.y) &lt;= <span class="number">0</span> <span class="keyword">and</span> </span><br><span class="line">        (x - p2.x) * (x - p3.x) &lt;= <span class="number">0</span> <span class="keyword">and</span> </span><br><span class="line">        (y - p2.y) * (y - p3.y) &lt;= <span class="number">0</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">改为：</span><br><span class="line"><span class="keyword">local</span> EPSINON = <span class="number">0.000001</span></span><br><span class="line"><span class="keyword">if</span> (x - p0.x) * (x - p1.x) &lt;= EPSINON <span class="keyword">and</span> </span><br><span class="line">        (y - p0.y) * (y - p1.y) &lt;= EPSINON <span class="keyword">and</span> </span><br><span class="line">        (x - p2.x) * (x - p3.x) &lt;= EPSINON <span class="keyword">and</span> </span><br><span class="line">        (y - p2.y) * (y - p3.y) &lt;= EPSINON </span><br><span class="line"><span class="keyword">then</span></span><br></pre></td></tr></table></figure>
<p>3.检测移动靶的碰撞检测问题。当靶与箭相向运动，靶移动速度过快，同时箭的移动速度过慢（两帧之间线段太短），就会很大概率出现穿透问题。有个很简单的解决方法，检测移动靶时候箭两帧之间的线段不能过小 （小于阈值时适当延长），而且策划的配置不会配太快的靶，这样就基本能避免检测移动物体的穿透问题。有时候限制bug发生的条件也可以简单地解决问题。</p>
<p>但是还是发现偶然小概率有穿靶情况，假如两帧之间最短距离定得太大，击中时箭会有种被靶吸附的效果，不太好。认真观察这个bug，箭刚好错过了移动靶的中位线时正好都未于靶右半部分。网上有个方法是增大碰撞区域，这里可以将靶右半部分作为碰撞盒，引入碰撞盒检测。</p>
<img src="/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/image_9kEuPrkNrd.png" class="">
<p>综上所述，得出碰撞检测的最佳实践是：</p>
<p>1.优先检查Y轴中心线</p>
<p>2.将x轴中心线以圆心分成两段，检测是否与半段相交。</p>
<p>3.否则判断箭是否下落状态并且下落角度大于45度，检测是否与右半段相交。</p>
<p>4.否则检测箭是否位于靶右半边区域，并且箭在上升，则碰撞；或者箭下降且到了中心点y轴一下区域，则碰撞。</p>
<h3 id="摇杆拉弓效果"><a href="#摇杆拉弓效果" class="headerlink" title="摇杆拉弓效果"></a>摇杆拉弓效果</h3><p>摇杆拉弓弓弦表现伸缩性</p>
<img src="/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/image_eBJv4Og4HY.png" class="">
<p>通过拉伸弓弦图片width来实现，但有个问题是弓弦的粗细程度会跟着伸缩而改变，在大小比较小的情况下表现不太明显，可以接受。</p>
<h3 id="轨迹预览"><a href="#轨迹预览" class="headerlink" title="轨迹预览"></a>轨迹预览</h3><img src="/2021/06/22/%E5%B0%84%E7%AE%AD%E5%B0%8F%E6%B8%B8%E6%88%8F/image_0xirtCNbHW.png" class="">
<p>这个轨迹实现有三步：</p>
<ol>
<li><p>初始化克隆出一系列轨迹点</p>
</li>
<li><p>抽离出箭移动公式，输入时刻输出位置</p>
</li>
<li><p>在拖拽监听中设置一系列轨迹点的位置</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;射箭小游戏&quot;&gt;&lt;a href=&quot;#射箭小游戏&quot; class=&quot;headerlink&quot; title=&quot;射箭小游戏&quot;&gt;&lt;/a&gt;射箭小游戏&lt;/h1&gt;&lt;img src=&quot;/2021/06/22/%E5%B0%84%E7%AE
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="业务系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="小游戏" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="小游戏" scheme="https://laoleo.github.io/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>新手引导系统</title>
    <link href="https://laoleo.github.io/2021/04/09/%E6%96%B0%E6%89%8B%E5%BC%95%E5%AF%BC%E7%B3%BB%E7%BB%9F/"/>
    <id>https://laoleo.github.io/2021/04/09/新手引导系统/</id>
    <published>2021-04-08T16:00:00.000Z</published>
    <updated>2022-12-07T13:35:39.593Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#新手引导系统">新手引导系统</a><ul>
<li><a href="#需求分析">需求分析</a></li>
<li><a href="#系统设计架构">系统设计架构</a></li>
<li><a href="#新手指引遮罩">新手指引遮罩</a></li>
<li><a href="#行为树">行为树</a></li>
</ul>
</li>
</ul>
<h1 id="新手引导系统"><a href="#新手引导系统" class="headerlink" title="新手引导系统"></a>新手引导系统</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li><p>强制引导。必须要完成的，常见是进入游戏新手副本。</p>
</li>
<li><p>条件触发引导。由各种条件达成触发，如达到等级，通关副本等。</p>
</li>
<li><p>中断后再次执行。玩家因异常或主动退出中断引导，根据关键步是否完成情况决定是否再次打开。</p>
</li>
<li><p>异常处理。当条件不满足时执行具体的处理方法。比如提交物品，不存在对应物品，引导直接结束。</p>
</li>
<li><p>附加协议。用于某些关键步，确定收发了指定协议然后确定步骤是否完成。比如引导召唤就判断召唤协议是否返回。</p>
</li>
<li><p>并行。引导动作是否并行执行，比如战斗引导中，英雄挂了，并行执行救援引导。</p>
</li>
</ol>
<h2 id="系统设计架构"><a href="#系统设计架构" class="headerlink" title="系统设计架构"></a>系统设计架构</h2><img src="/2021/04/09/%E6%96%B0%E6%89%8B%E5%BC%95%E5%AF%BC%E7%B3%BB%E7%BB%9F/image_BXoVzPQBan.png" class="">
<h2 id="新手指引遮罩"><a href="#新手指引遮罩" class="headerlink" title="新手指引遮罩"></a>新手指引遮罩</h2><p>挖空矩形遮罩上的目标显示区域实现</p>
<ol>
<li><p>编写继承Graphic的脚本类，绑定在mask view上</p>
</li>
<li><p>根据指定的节点，计算中心点，宽高等数据，确定挖孔区域</p>
</li>
<li><p>在OnPopulateMesh回调中重绘顶点数据，绘制四个矩形组成的一个中间空的图形，这个就是所谓的挖孔实现</p>
</li>
<li><p>脚本类集成IPointerClickHandler接口，在OnPointerClick回调中根据鼠标点位置，判断是否点击在挖孔区域内，接着执行lua点击回调，同时传递点击事件</p>
</li>
</ol>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecuteEvents.Execute(arrow.gameObject, ed, ExecuteEvents.pointerClickHandler);</span><br></pre></td></tr></table></figure>
<h2 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a>行为树</h2><p>利用行为树控制整个流程，一个引导执行完毕后接着执行另一个引导。</p>
<ol>
<li><p>action的执行有行为树FlowSequence类控制，action作为它的children节点，控制其串行执行</p>
</li>
<li><p>每个节点有状态和结果两个属性，onStart()开始执行，执行完成调用onDone()，通知父节点执行next child的onStart()</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#新手引导系统&quot;&gt;新手引导系统&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a 
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="业务系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="新手引导" scheme="https://laoleo.github.io/tags/%E6%96%B0%E6%89%8B%E5%BC%95%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>海外版本diff工具</title>
    <link href="https://laoleo.github.io/2021/03/18/%E6%B5%B7%E5%A4%96%E7%89%88%E6%9C%ACdiff%E5%B7%A5%E5%85%B7/"/>
    <id>https://laoleo.github.io/2021/03/18/海外版本diff工具/</id>
    <published>2021-03-17T16:00:00.000Z</published>
    <updated>2022-12-07T13:35:29.622Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#海外版本diff工具">海外版本diff工具</a><ul>
<li><a href="#一背景">一、背景</a></li>
<li><a href="#二使用介绍">二、使用介绍</a></li>
<li><a href="#三实现思路">三、实现思路</a></li>
<li><a href="#四sh脚本语法">四、sh脚本语法</a></li>
</ul>
</li>
</ul>
<h1 id="海外版本diff工具"><a href="#海外版本diff工具" class="headerlink" title="海外版本diff工具"></a>海外版本diff工具</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>海外版本是从国内版本基础上做差异化替换而来，代码上采用replaceModule的方式覆盖重写module的方法，资源上优先加载对应语言目录下的替换资源。</p>
<p>这种方案决定了，大多数替换内容（代码、预制物等） 是在源内容的基础上演变而来，依赖源内容。当合并国内版本后，需要检查源内容做了什么哪些修改，代码上有没有逻辑冲突，预制资源方面需不需要更新。</p>
<p>可以总结有两个需求：</p>
<ol>
<li><p>检查replace的module在合并前后代码有哪些更新</p>
</li>
<li><p>检查出替换的预制在合并前后有哪些是更新了</p>
</li>
</ol>
<p>更新：</p>
<p>追加了其他两个需求：</p>
<p>1.检查多语言的scene目录资源在合并前后的更改和新增情况</p>
<p>2.检查fmod资源的更新情况</p>
<h2 id="二、使用介绍"><a href="#二、使用介绍" class="headerlink" title="二、使用介绍"></a>二、使用介绍</h2><img src="/2021/03/18/%E6%B5%B7%E5%A4%96%E7%89%88%E6%9C%ACdiff%E5%B7%A5%E5%85%B7/image_lch2ake5uD.png" class="">
<p>选项介绍：</p>
<ul>
<li><p>语言类型：选择当前语言类型，必填。</p>
</li>
<li><p>合并后版本号：海外dev分支合并国服版本后的commitID，commitID太长不一定需要填全部，git能够识别commit即可，必填。</p>
</li>
<li><p>合并前版本号：海外的dev分支合并国服版本前的commitID，必填。</p>
</li>
<li><p>自定义执行shell文件的exe路径：用于执行diff.sh脚本的shell exe路径。假如你的系统有git-bash.exe，填它的路径也可以。windows上必填，因为windows上默认的终端可能是cmd.exe，它执行shell文件会不成功。mac系统可以不填。</p>
</li>
</ul>
<p>比如台湾版本：</p>
<p>语言类型选：tw</p>
<p>合并前后版本到gitlab pjg-client仓库commit栏目上找commitID。</p>
<p>功能介绍：</p>
<ul>
<li><p>导出replace module更改：将replace module代码文件的差异导出到桌面上，文件名replace-module-{commitID0}-{commitID1}.diff。</p>
</li>
<li><p>导出多语言目录zh/ui/views下的预制perfab文件更新情况：将多语言目录下ui的prefab文件对应的zh目录源文件在两个版本间的差异，和zh目录下新增但海外语言目录没有的预制内容导出到桌边，文件名zh-UIPrefab-{commitID0}-{commitID1}.diff。</p>
</li>
<li><p>导出多语言目录zh/scene下所有资源的更新情况：同上，多语言目录的资源对应的zh目录下的资源，对比两个版本前后zh目录的资源更新情况和新增情况，然后由场景决定是否需要更新对应多语言（如tw）目录的资源。执行会导出diff文件到桌面。</p>
</li>
<li><p>导出fmod event的更改情况：检出更改的文件，决定是否更改对应多语言目录下的文件。</p>
</li>
</ul>
<h2 id="三、实现思路"><a href="#三、实现思路" class="headerlink" title="三、实现思路"></a>三、实现思路</h2><img src="/2021/03/18/%E6%B5%B7%E5%A4%96%E7%89%88%E6%9C%ACdiff%E5%B7%A5%E5%85%B7/image_y5ou7bMrqO.png" class="">
<p>实现原理很简单，就是找出相应的文件名，调用git diff命令输出差异即可。</p>
<h2 id="四、sh脚本语法"><a href="#四、sh脚本语法" class="headerlink" title="四、sh脚本语法"></a>四、sh脚本语法</h2><p>工具利用c# API Process类执行sh脚本，diff.sh脚本主要做两件事情，一是解析参数，二是调用git diff命令。</p>
<p>这里简单解析下sh语法，帮助理解代码。</p>
<p>1、获取参数<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="variable">$@</span></span><br></pre></td></tr></table></figure></p>
<p>2、定义数组<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">commitIdArr</span><span class="operator">=</span>()</span><br></pre></td></tr></table></figure><br>3、数值自增<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name">commitIdArr</span><span class="character">\_</span>index++))</span><br></pre></td></tr></table></figure><br>4、获取变量值<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$moduleNameArr_index</span>或者<span class="variable">$&#123;outputFileName&#125;</span></span><br></pre></td></tr></table></figure><br>5、输出数组内容<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo moduleNameArr\[<span class="symbol">@]</span></span><br></pre></td></tr></table></figure><br>6、数组长度<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="variable">$&#123;</span><span class="comment">#moduleNameArr\[@]&#125;</span></span><br></pre></td></tr></table></figure><br>学习shell脚本语法可以查看这里：<a target="_blank" rel="noopener" href="https://www.runoob.com/linux/linux-shell.html" title="shell教程">shell教程</a>。</p>
<p>代码：</p>
<p><a href="海外版本diff工具/LanguageDiffWindow_xSMzWdHsMs.cs">LanguageDiffWindow.cs</a></p>
<p><a href="海外版本diff工具/diff_7U8prTz5se.sh">diff.sh</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#海外版本diff工具&quot;&gt;海外版本diff工具&lt;/a&gt;&lt;ul&gt;
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="多语言" scheme="https://laoleo.github.io/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    
      <category term="海外" scheme="https://laoleo.github.io/tags/%E6%B5%B7%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>UIGraphicText表情渲染优化-支持表情来自不同图集</title>
    <link href="https://laoleo.github.io/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/"/>
    <id>https://laoleo.github.io/2021/02/25/UGUIText组件实现图文混排——项目优化/</id>
    <published>2021-02-24T16:00:00.000Z</published>
    <updated>2022-12-07T13:35:21.071Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h1 id="UIGraphicText表情渲染优化-支持表情来自不同图集"><a href="#UIGraphicText表情渲染优化-支持表情来自不同图集" class="headerlink" title="UIGraphicText表情渲染优化-支持表情来自不同图集"></a>UIGraphicText表情渲染优化-支持表情来自不同图集</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当表情sprite没有被打到一个图集上，UIGraphicText类渲染表情或会错乱。</p>
<h2 id="表情的渲染过程"><a href="#表情的渲染过程" class="headerlink" title="表情的渲染过程"></a>表情的渲染过程</h2><p>聊天窗口表情的渲染过程大致如何：</p>
<img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/620aa9915773654e87c2ed8201b32736.png" class="" title="C:\\454369bfe7514cfa65961fb357f5a99b">
<ul>
<li>ui_emoji.asset包含所有emoji sprite信息，包括name、引用等。</li>
<li>UIGraphicText主要是解析输入内容字符串，得出sprite的顶点几何参数等。</li>
<li>CanvasRender应是负责渲染的。</li>
<li>UIGraphicTextSprites继承自<a target="_blank" rel="noopener" href="https://docs.unity.cn/cn/current/ScriptReference/UI.MaskableGraphic.html">MaskableGraphic</a>类，这个类的作用是管理源图集，截取源图集的某个区域。</li>
</ul>
<p>获取源图集的代码：</p>
<img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/78a230605169741abf7b42ea9cf32942.tmp" class="" title="C:\\5c36480e5fd362841a9fda19931987af">
<p>表情的源图集引用被写死，默认第一个表情的源图集。这就是当表情来自其他图集时，显示错误的原因。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>目前所有的表情会打到一个图集上，下面两种场景会导致表情打到不同图集：</p>
<ol>
<li>表情增加，直到2048*2048大小装不下（图集maxsize为2048是项目组限制，因为在一些低端机上加载不了大于2048的图）</li>
<li>表情sprite的tag不一致，需要用别的tag划分表情（tag决定sprite所属的图集）</li>
</ol>
<p>为了满足以上两种场景，需要对这个系统进行优化，支持表情来自不同的图集。</p>
<p>有两个步骤：</p>
<ol>
<li>更改mainTexture获取</li>
</ol>
<p>展开源码</p>
<p>// UIGraphicTextSprites.cs</p>
<p>public class UIGraphicTextSprites : MaskableGraphic</p>
<p>{</p>
<p>…</p>
<p>private Texture _texSource; // 由外部传入改写mainTexture</p>
<p>public override Texture mainTexture</p>
<p>{</p>
<p>get</p>
<p>{</p>
<p>if (m_spriteAsset == null)</p>
<p>return s_WhiteTexture;</p>
<p>if (m_spriteAsset.listSpriteInfor == null || m_spriteAsset.listSpriteInfor.Count == 0)</p>
<p>{</p>
<p>return s_WhiteTexture;</p>
<p>}</p>
<p>if (_texSource != null)</p>
<p>{</p>
<p>return _texSource;</p>
<p>}</p>
<p>var texSource = m_spriteAsset.listSpriteInfor[0].sprite.texture;</p>
<p>if (texSource == null)</p>
<p>return s_WhiteTexture;</p>
<p>else</p>
<p>return texSource;</p>
<p>}</p>
<p>}</p>
<p>public void SetMainTexture(Texture t)</p>
<p>{</p>
<p>_texSource = t;</p>
<p>}</p>
<p>…</p>
<p>}</p>
<p>2. 更改对应的源图集</p>
<p>展开源码</p>
<p>// UIGraphicText.cs</p>
<p>void CalcQuadTag(IList\&lt;UIVertex> verts)</p>
<p>{</p>
<p>…</p>
<p>Texture texSource = listSpriteInfor[0].sprite.texture;</p>
<p>for (int j = 0; j \&lt; listSpriteInfor.Count; j++)</p>
<p>{</p>
<p>//通过标签的名称去索引spriteAsset里所对应的sprite的名称</p>
<p>if (listTagInfor[i].name == listSpriteInfor[j].name) {</p>
<p>spriteRect = listSpriteInfor[j].sprite.textureRect;</p>
<p>texSource = listSpriteInfor[j].sprite.texture;</p>
<p>m_spriteGraphic.SetMainTexture(texSource);</p>
<p>break;</p>
<p>}</p>
<p>}</p>
<p>// Texture texSource = listSpriteInfor[0].sprite.texture;</p>
<p>…</p>
<p>}</p>
<h3 id="0714更新"><a href="#0714更新" class="headerlink" title="0714更新"></a>0714更新</h3><p>发现动态表情在pc上不打图集情况下显示有问题，表情并没有想预期一样动，有的甚至不动。</p>
<p>动态表情的实现原理是按一定的帧率改变sprite的顶点、uv和网格三角形参数，通过CanvasRenderer组件和UIGraphicTextSprites组件（继承MaskableGraphic），截取源图texture（sprite或者图集）得到显示区域。</p>
<p>原因是不打图集时，动态表情的源图获取不正确，截取的源图永远是第一张。</p>
<p>解决方法是在Update()中切换sprite截取参数同时改变UIGraphicTextSprites的mainTexture。</p>
<p>更改commit看这里。</p>
<h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>我的unity目标平台是android，先将textureImporter对安卓图片压缩格式更改代码注释掉，否则更改压缩格式会被重置。</p>
<img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/3dbde81dd90a3504f493adc0aeb348f5.tmp" class="" title="C:\\c1b700ce925f6782c0ddfad7ebaff16d">
<p>更改1601_1,1602_1,1603_1的format为区别于ETC2_RGBA8的其他格式，测试不同压缩格式打包不同图集的场景：</p>
<img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/03742e0b64e62e87941c5ff8441ee88a.tmp" class="" title="C:\\fe883496df4caacccd989e850fccc8ca">
<p>更改1604_1,1605_1的tag，测试不同tag打包到不同图集的场景：</p>
<img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/c9e62ff06615ff8ab9ab1b914721f146.tmp" class="" title="C:\\f99e868b89f1a7b9ab3af6a5c9fdac1d">
<p>sprite packer上pack图集，检查表情的确打到了三个不同的图集：</p>
<p><img src="UGUIText组件实现图文混排——项目优化/10e1096586b53ed9f944e9d5101c4241.tmp" alt="C:\\883fd9a545661d5f5811d3edac78f399"><img src="UGUIText组件实现图文混排——项目优化/dc44a3625ccf585467173a0f9a8e574f.tmp" alt="C:\\c0bf4aa254b650fb676bfa50bfbec15f"> <img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/1b0894421887907ac78332cb31b81eca.tmp" class="" title="C:\\094eb1d714aefb5993a488081c763144"> <img src="/2021/02/25/UGUIText%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/ceb2cc566e9ddb1db29fc8a826ecd3a1.tmp" class="" title="C:\\e4ce0e9521e9b633c56b0d462711f669"></p>
<p>pc上测试，正常。</p>
<p>安卓上测试，正常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;UIGraphicText表情渲染优化-支持表情来自不同图集&quot;&gt;&lt;a href=&quot;#UIGraphicText表情渲染优化-支持表情来自不同图集&quot; class=&quot;headerlink&quot; title=&quot;UIGraphi
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="业务系统" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="图文混排" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
    
      <category term="UGUI" scheme="https://laoleo.github.io/tags/UGUI/"/>
    
      <category term="emoji" scheme="https://laoleo.github.io/tags/emoji/"/>
    
      <category term="图文混排" scheme="https://laoleo.github.io/tags/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>游戏中特效加载原理和优化方法</title>
    <link href="https://laoleo.github.io/2021/01/25/%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%89%B9%E6%95%88%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>https://laoleo.github.io/2021/01/25/游戏中特效加载原理和优化方法/</id>
    <published>2021-01-24T16:00:00.000Z</published>
    <updated>2022-12-07T13:34:27.932Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<p>游戏项目中一般会用到一些优化手段，大部分优化的是资源的大小对内存的影响，比如项目中特效的加载会拥有两个类：photoFactoryEffect和photoMutilEffect</p>
<p><strong>photoFactory与photoMutil的区别</strong></p>
<p>photoFactory是一个优化类，作用就是减轻通过photoMutil生成的特效克隆go的大小，优化的是内存</p>
<p>photoMutil生成一个挂载特效rt的go，真正管理特效的是photoProducer。</p>
<p><strong>特效加载原理</strong></p>
<p>特效的gameObject通过camaro和rt映射到其他的gameObject上，一个特效只会加载一次，利用rt分发多份。</p>
<p>// PhotoEffectFactory.lua  module(“logic.common.ugui.PhotoEffectFactory”,package.seeall)  local PhotoEffectFactory = class(“PhotoEffectFactory”)  function PhotoEffectFactory:ctor()     self._factoryContainer = goutil.create(“PHOTOFACTORYROOT”, false)     GameUtils.setPos(self._factoryContainer, -2500, 0, 0)     – 所有生效的特效     self._effects={}     – 池化     self._pool=ObjectPool.New(20,PhotoEffectFactory._createEffect,         PhotoEffectFactory._disposeEffect,         PhotoEffectFactory._resetEffect         ) end  function PhotoEffectFactory._createEffect()     local effect = {}     local container = goutil.create(“eff”, true)     container.layer = Framework.LayerUtil.NameToLayer(SceneLayer.UI)     effect.container = container     effect.photoEff = Framework.LuaComponentContainer.Add(container, PhotoMultiEffect)     effect.photoEff:setEffectLoadedCallback(PhotoEffectFactory._onEffectLoaded, PhotoEffectFactory.instance)     –克隆的特效     effect.clones={}     – 引用数     effect.count=0     return effect end  function PhotoEffectFactory._resetEffect(effect)     effect.count=0     effect.clones={}     effect.photoEff:clear() end  function PhotoEffectFactory._disposeEffect(effect)     if not goutil.isNil(effect.container) then          goutil.destroy(effect.container)     end end  – 外部接口：提供256 * 144规格的RT特效克隆体 –uiWidth, uiHeight  需要显示的ui尺寸，请根据具体界面情况传入 function PhotoEffectFactory:getSmallClonePhotoEffect(url, uiWidth, uiHeight)     return self:getClonePhotoEffect(url, PhotoUtil.SmallRTWidth, PhotoUtil.SmallRTHeight, uiWidth, uiHeight) end  – 外部接口：重新播放RT特效 function PhotoEffectFactory:rePlayPhotoEffect(url)     local photoData = url and self._effects[url]     if photoData then         if not goutil.isNil(photoData.orgGoInst) then             goutil.setActive(photoData.orgGoInst, false)             goutil.setActive(photoData.orgGoInst, true)         end     end end  – 获取克隆的RT特效预制物 –uiWidth, uiHeight  需要显示的ui尺寸，请根据具体界面情况传入 function PhotoEffectFactory:getClonePhotoEffect(url, rtWidth, rtHeight, uiWidth, uiHeight)     if GameUtils.isEmptyString(url) then         return     end     – 如果未生成     local eff=self._effects[url]     if eff==nil then         eff=self._pool:fetchObject()         local container=eff.container         rtWidth = rtWidth or PhotoUtil.PartRTWidth         rtHeight = rtHeight or PhotoUtil.PartRTHeight         goutil.setWidth(container.transform, uiWidth or rtWidth)–ui尺寸默认是rt大小         goutil.setHeight(container.transform, uiHeight or rtHeight)         – 放在factory root 下         goutil.addChildToParent(eff.container, self._factoryContainer)         – rename         eff.container.name=url         self._effects[url]=eff         –临时处理，后续优化         if rtWidth == PhotoUtil.SmallRTWidth and rtHeight == PhotoUtil.SmallRTHeight then             eff.photoEff:showSmallEffect(url)         else                     eff.photoEff:showPartEffect(url)         end     end      eff.count = eff.count + 1     –只是克隆rawImage，transform     local objClone = goutil.create(tostring(eff.count),true)     objClone.layer = Framework.LayerUtil.NameToLayer(SceneLayer.UI)     GameUtils.copyRectTransform(objClone:GetComponent(goutil.Type_RectTransform), eff.container:GetComponent(goutil.Type_RectTransform))     GameUtils.copyRawImage(objClone:AddComponent(typeof(UnityEngine.UI.RawImage)), eff.container:GetComponent(typeof(UnityEngine.UI.RawImage)))     – local objClone = goutil.clone(self._urlToPhotoDict[url].container, tostring(self._urlToPhotoDict[url].count))     —————————–     – 判断当前特效是否已经加载完成，是则直接显示     if eff.photoEff:checkIsFinishLoadByUrl(url) then         local rawImageComp = objClone:GetComponent(typeof(UnityEngine.UI.RawImage))         if rawImageComp then             rawImageComp.enabled = true         end     end     table.insert(eff.clones, objClone)     return objClone end  – 判断创建出来的GameObject的RT与复制品的RT是否指向同一张RT，如果不是，则需要将复制品指向的RT修改过来 function PhotoEffectFactory:_pointToSameRT(url)     local photoData = self._effects[url]     if photoData and photoData.photoEff then         local orgRawImage = photoData.photoEff:getRawImage()         if orgRawImage then             local goCopy = photoData.clones and photoData.clones[1]             if not goutil.isNil(goCopy) then                 local copyRawImage = goCopy:GetComponent(typeof(UnityEngine.UI.RawImage))                 if copyRawImage and orgRawImage.texture ~= copyRawImage.texture then                     for i = 1, #photoData.clones do                         goCopy = photoData.clones[i]                         if not goutil.isNil(goCopy) then                             copyRawImage = goCopy:GetComponent(typeof(UnityEngine.UI.RawImage))                             if copyRawImage then                                 copyRawImage.texture = orgRawImage.texture                             end                         end                     end                 end             end         end     end end  function PhotoEffectFactory:turnOn(url)     if self._effects and self._effects[url] then         if self._effects[url].photoEff then             self._effects[url].photoEff:turnOn()             self:_pointToSameRT(url)         end     end end  function PhotoEffectFactory:turnOff(url)     if self._effects and self._effects[url] then         if self._effects[url].photoEff then             self._effects[url].photoEff:turnOff()           end     end end  function PhotoEffectFactory:_onEffectLoaded(goInst, res)     if res and res.ResPath then         local data = self._effects and self._effects[res.ResPath]         if data then             data.orgGoInst = goInst             if data.clones then                 local rawImageComp                 for i = 1, #data.clones do                     if not goutil.isNil(data.clones[i]) then                         rawImageComp = data.clones[i]:GetComponent(typeof(UnityEngine.UI.RawImage))                         if rawImageComp then                             rawImageComp.enabled = true                         end                     end                 end             end         end     end end  function PhotoEffectFactory:destroyClonePhotoEffect(url,justclear)     local photoEffect=self._effects and self._effects[url]      if photoEffect then         photoEffect.count = photoEffect.count - 1         if photoEffect.count &lt;= 0 then             self._pool:returnObject(photoEffect)             self._effects[url]=nil         end     end end   – 预留接口：清除所有的PhotoEffect function PhotoEffectFactory:destroy()     if self._effects then         self._pool:clear()         self._effects={}     end end  PhotoEffectFactory.instance = PhotoEffectFactory.New()  return PhotoEffectFactory</p>
<p>// photoMultiEffect.lua  module(“logic.common.ugui.PhotoMultiEffect”, package.seeall)  local PhotoMultiEffect = class(“PhotoMultiEffect”)  function PhotoMultiEffect:ctor(compContainer)     self._compContainer = compContainer     self._go = self._compContainer.gameObject     self._multiLoader = MultiResLoader.New() –资源的引用都在这里引用     self._photo = Framework.PhotoBase.Add(self._go)     self._rtWidth = PhotoUtil.PartRTWidth     self._rtHeight = PhotoUtil.PartRTHeight     self._effectLoadedCallback = nil     self._effectLoadedCallbackObj = nil     self._effectOnePlayFinishCallback = nil     self._effectOnePlayFinishCallbackObj = nil     self._bInitUVRect = true     self._urls = {}     self._goInstList = {}     PhotoUtil.initPhotoSetting()     self:_initRawImage() end  function PhotoMultiEffect:_initRawImage()     if not goutil.isNil(self._go) then         self._rawImage = self._go:GetComponent(typeof(UnityEngine.UI.RawImage))         if self._rawImage == nil then             self._rawImage = self._go:AddComponent(typeof(UnityEngine.UI.RawImage))         end         self._rawImage.enabled = false         self._rawImage.raycastTarget = false         self._rawImage.material = PhotoUtil.getEffMaterial()     end end  function PhotoMultiEffect:_setRawImageUVRect(rtWidth, rtHeight)     if self._bInitUVRect and self._rawImage then         self._rtWidth = rtWidth         self._rtHeight = rtHeight         PhotoUtil.setRTCapacity(rtWidth, rtHeight)         –计算RawImage的大小以及偏移         local uvRectW = math.min(1, goutil.getWidth(self._go.transform) / rtWidth)         local uvRectH = math.min(1, goutil.getHeight(self._go.transform) / rtHeight)         local uvRectX = (1 - uvRectW) * 0.5         local uvRectY = (1 - uvRectH) * 0.5         self._rawImage.uvRect = UnityEngine.Rect.New(uvRectX, uvRectY, uvRectW, uvRectH)         self._bInitUVRect = false     end end  – 该接口只提供给PhotoEffectFactory使用，其他地方不允许调用 function PhotoMultiEffect:getRawImage()     return self._rawImage end  function PhotoMultiEffect:setEffectLoadedCallback(callback, callbackObj)     self._effectLoadedCallback = callback     self._effectLoadedCallbackObj = callbackObj end  function PhotoMultiEffect:setEffectOnePlayFinishCallback(callback, callbackObj)     self._effectOnePlayFinishCallback = callback     self._effectOnePlayFinishCallbackObj = callbackObj end  function PhotoMultiEffect:setClickEnable(bRaycastTarget)     if self._rawImage then         self._rawImage.raycastTarget = bRaycastTarget     end end  function PhotoMultiEffect:setClickCallback(callback, callbackObj)     if callback == nil then         return     end     if goutil.isNil(self._go) then         return     end     if not self._btnClick then         local compButton = self._go:GetComponent(typeof(UnityEngine.UI.Button))         if compButton == nil then             self._go:AddComponent(typeof(UnityEngine.UI.Button))         end         self._btnClick = Framework.ButtonAdapter.Get(self._go)         self._btnClick:AddClickListener(callback, callbackObj)     end end  – 小图标规格的RT特效 256 * 144 function PhotoMultiEffect:showSmallEffect(…)     local urls = {…}     if not urls or #urls == 0 then         return     end     self:loadRes(urls, PhotoUtil.SmallRTWidth, PhotoUtil.SmallRTHeight) end  – 中等规格的RT特效 512 * 288 function PhotoMultiEffect:showPartEffect(…)     local urls = {…}     if not urls or #urls == 0 then         return     end     self:loadRes(urls, PhotoUtil.PartRTWidth, PhotoUtil.PartRTHeight) end  – 全屏规格的RT特效 1280 * 720 function PhotoMultiEffect:showFullScreneEffect(…)     local urls = {…}     if not urls or #urls == 0 then         return     end     self:loadRes(urls, PhotoUtil.RTWidth, PhotoUtil.RTHeight) end  – 最大全屏规格的RT特效 1560 * 720，不能再接受更大的尺寸规格 function PhotoMultiEffect:showMaxScreneEffect(…)     local urls = {…}     if not urls or #urls == 0 then         return     end     self:loadRes(urls, PhotoUtil.MaxRTWidth, PhotoUtil.MaxRTHeight) end  function PhotoMultiEffect:loadRes(urls, rtWidth, rtHeight)     if self._photo == nil then         return     end     self:_setRawImageUVRect(rtWidth, rtHeight)     self._photo:TurnOn(rtWidth, rtHeight)     self._isOn = true     local renderTexture = self._photo and self._photo.producer and self._photo.producer.renderTexture     if renderTexture == nil then         printError(“renderTexture is nil, self._go=”, self._go.name)         self._rawImage.enabled = false         return     – 重复 photobase.turnOn里已经做了     – else         – self._rawImage.texture = renderTexture     end     local len = #urls     for i = 1, len do         if not self._urls then             self._urls = {}         end         table.insert(self._urls, urls[i])         self._multiLoader:addResPath(urls[i])     end     PhotoUtil.addUsingRTCount(self, rtWidth, rtHeight)     –暂时没有全部加载完毕逻辑回调     self._multiLoader:load(_, self._onSingleResLoaded, self) end  function PhotoMultiEffect:_onSingleResLoaded(res)     if res.IsSuccess then         if goutil.isNil(self._go) or self._photo == nil then             self:clear()             return         end         –9/4修改：self._isOn为false表示有两种情况，一种是在特效加载完成之前调用了turnOff接口，一种是调用了clear接口；         –按道理调用clear接口并不会回调到这里，所以处理第一种情况就好         if not self._isOn then             if self._urls == nil or #self._urls == 0 then                 self:turnOff()                 return             end         end         local goInst         if self._urls then             for i = #self._urls, 1, -1 do                 if res.ResPath == self._urls[i] then                     table.remove(self._urls, i)                     goInst = goutil.clone(res:GetAsset(nil, nil))                     goInst.layer = Framework.LayerUtil.NameToLayer(PhotoUtil.LayerName)                     table.insert(self._goInstList, goInst)                     break                 end             end         end         if goInst then             if self._photo then                 –检查当前是turnOff还是turnOn                 – goutil.setActive(goInst, self._isOn)                 self._rawImage.enabled = self._isOn                 if self._isOn then                     self._photo:ShowTarget(goInst, true)                 else                     goutil.addChildToParent(goInst, self._go)                 end             end             if self._effectLoadedCallback then                 if self._effectLoadedCallbackObj then                     self._effectLoadedCallback(self._effectLoadedCallbackObj, goInst, res)                 else                     self._effectLoadedCallback(goInst, res)                 end             end             –检查美术是否有挂载EffectPlayer的组件             local _effectCSComp = goInst:GetComponent(typeof(Pjg.EffectPlayer))             if _effectCSComp and not goutil.isNil(_effectCSComp) then                 –参数默认以组件的，暂不支持外部设置参数                 _effectCSComp:AddFinishListener(self._onEffectOnePlayFinish, self)                 –加载好就立即执行play                 _effectCSComp:Play()             end         end     end end  –暂时没有全部播放完毕逻辑回调 function PhotoMultiEffect:_onEffectOnePlayFinish()     if goutil.isNil(self._go) then         return     end     if self._effectOnePlayFinishCallback then         if self._effectOnePlayFinishCallbackObj then             self._effectOnePlayFinishCallback(self._effectOnePlayFinishCallbackObj)         else             self._effectOnePlayFinishCallback()         end     end end  function PhotoMultiEffect:getFirstUrl()     return self._urls and self._urls[1] end  function PhotoMultiEffect:getUrlString()     return table.concat(self._urls, “#”) end  – 根据传入的路径判断该特效是否已经加载完成 function PhotoMultiEffect:checkIsFinishLoadByUrl(url)     local bLoaded = false     if self._multiLoader and self._multiLoader:getResource(url) then         return true     end end  – bReplay：是否重播，有些特效需要再次打开的时候调用 – 注意：重播只针对本身是显示状态的特效，如果本身特效由于功能需要自己被隐藏，bReplay传入true也是没法重播 function PhotoMultiEffect:turnOn(bReplay)     if not self._isOn then         if self._rawImage then             self._rawImage.enabled = true         end         if self._goInstList and self._photo then             self._photo:TurnOn(self._rtWidth, self._rtHeight)             PhotoUtil.addUsingRTCount(self, self._rtWidth, self._rtHeight)             local goInst             for i = 1, #self._goInstList do                 goInst = self._goInstList[i]                 if not goutil.isNil(goInst) then                     if bReplay and goInst.activeSelf then                         goutil.setActive(goInst, false)                         goutil.setActive(goInst, true)                     end                     –检查美术是否有挂载EffectPlayer的组件                     local _effectCSComp = goInst:GetComponent(typeof(Pjg.EffectPlayer))                     if _effectCSComp and not goutil.isNil(_effectCSComp) then                         _effectCSComp:Stop()                         _effectCSComp:RemoveFinishListener()                         –参数默认以组件的，暂不支持外部设置参数                         _effectCSComp:AddFinishListener(self._onEffectOnePlayFinish, self)                         _effectCSComp:Play()                     end                     self._photo:ShowTarget(goInst, true)                 end             end         end         self._isOn = true     end end  function PhotoMultiEffect:turnOff()     if goutil.isNil(self._go) then         return     end     if self._isOn then         if self._rawImage then             self._rawImage.enabled = false         end         if self._goInstList and self._photo then             for i = 1, #self._goInstList do                 if not goutil.isNil(self._goInstList[i]) then                     –goutil.setActive(self._goInstList[i], false)                     goutil.addChildToParent(self._goInstList[i], self._go)                 end             end         end         if self._photo then             self._photo:TurnOff()             PhotoUtil.reduceUsingRTCount(self, self._rtWidth, self._rtHeight)         end         self._isOn = false     end end  function PhotoMultiEffect:clear()     self._urls = {}     if self._multiLoader then         self._multiLoader:clear()     end     if self._goInstList then         for i = 1, #self._goInstList do             if not goutil.isNil(self._goInstList[i]) then                 –检查美术是否有挂载EffectPlayer的组件                 local _effectCSComp = self._goInstList[i]:GetComponent(typeof(Pjg.EffectPlayer))                 if _effectCSComp and not goutil.isNil(_effectCSComp) then                     _effectCSComp:Stop()                     _effectCSComp:RemoveFinishListener()                 end                 goutil.destroy(self._goInstList[i])             end         end         self._goInstList = {}     end     if self._photo then         self._photo:TurnOff()         PhotoUtil.reduceUsingRTCount(self, self._rtWidth, self._rtHeight)     end     self._isOn = false     if goutil.isNil(self._go) then         return     end     if self._rawImage then         self._rawImage.enabled = false     end     self._bInitUVRect = true end  function PhotoMultiEffect:OnDestroy()     self:clear()     self._multiLoader=nil     self._compContainer = nil     self._go = nil     self._photo = nil     self._rawImage = nil     self._effectLoadedCallback = nil     self._effectLoadedCallbackObj = nil     self._effectOnePlayFinishCallback = nil     self._effectOnePlayFinishCallbackObj = nil     self._urls = nil     self._goInstList = nil      if self._btnClick then         self._btnClick:RemoveClickListener()         self._btnClick = nil     end end – 判断是否是空闲，需要加载特效 function PhotoMultiEffect:isFree()     return not self._isOn and self._multiLoader.totalCount==0 end  return PhotoMultiEffect</p>
<p>// PhotoBase.cs  using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI;  namespace Framework {     public class PhotoBase : MonoBehaviour      {         protected PhotoProducer _producer;         protected RawImage _rawImg;          public static PhotoBase Add(GameObject go)         {             return go.AddComponentOnce<PhotoBase>();         }          void Awake()         {             //2018/8/8修改,防止gameObject或父节点被隐藏，lua已经初始化RawImage后显示gameObject的时候Awake接口被调用             _rawImg = gameObject.GetComponent<RawImage> ();             if (_rawImg == null) {                 _rawImg = gameObject.AddComponentOnce<RawImage>();                 _rawImg.raycastTarget = false;                 _rawImg.texture = null;                 _rawImg.material = PhotoProducerCache.Instance.GetPhotoMaterial();             }         }          protected virtual void OnEnable()         {             if(_producer != null)             {                 _producer.producerContainer.SetActive(true);             }         }          protected virtual void OnDisable()         {             if(_producer != null &amp;&amp; _producer.producerContainer != null)             {                 _producer.producerContainer.SetActive(false);             }         }          public void EnableClick(bool isEnable)         {             if(isEnable)             {                 _rawImg.raycastTarget = true;             }             else             {                 _rawImg.raycastTarget = false;             }         }          //在turn on的时候才有值         public PhotoProducer producer         {             get{ return _producer;}         }          //在turn on的时候才能调用         public void SetCameraPosition(float x,float y,float z)         {             GlobalObject.gVec3.x = x;             GlobalObject.gVec3.y = y;             GlobalObject.gVec3.z = z;              _producer.rtCamera.transform.localPosition = GlobalObject.gVec3;         }          //在turn on的时候才能调用         public void SetCameraRotation(float x,float y,float z)         {             _producer.rtCamera.transform.localRotation = Quaternion.Euler(x,y,z);         }          /**          *  将一个物体放入拍摄空间内          * */         public void ShowTarget(GameObject go,bool allSameLayer)         {             if(allSameLayer)                 go.SetLayerRecursively(PhotoProducerCache.Instance.GetCullingLayer());             else                 go.layer = PhotoProducerCache.Instance.GetCullingLayer();                          go.transform.SetParent(_producer.targetContainer.transform,false);         }          /**          *  把拍摄目标全部移除          * */         public void RemoveAllTargets()         {             GameObjectUtil.ClearChildren(_producer.targetContainer);         }                      public void TurnOn()         {             if(_producer == null)             {                 Rect size = (gameObject.transform as RectTransform).rect;                 _producer = PhotoProducerCache.Instance.Fetch(Mathf.CeilToInt(size.width),Mathf.CeilToInt(size.height));                 _rawImg.texture = _producer.renderTexture;              }              if(this.gameObject.activeInHierarchy)             {                 _producer.producerContainer.SetActive(true);             }             else             {                 _producer.producerContainer.SetActive(false);             }         }          /// <summary>         /// 重载TurnOn接口，支持外部传入需要创建的RT大小         /// </summary>         public void TurnOn(float width, float height)         {             if(_producer == null)             {                 if (_rawImg == null) {                     _rawImg = gameObject.GetComponent<RawImage> ();                 }                 _producer = PhotoProducerCache.Instance.Fetch(Mathf.CeilToInt(width),Mathf.CeilToInt(height));                 _rawImg.texture = _producer.renderTexture;              }              if(this.gameObject.activeInHierarchy)             {                 _producer.producerContainer.SetActive(true);             }             else             {                 _producer.producerContainer.SetActive(false);             }         }          public bool IsOn         {             get{ return _producer != null;}         }          public void TurnOff()         {             if(_producer != null)             {                 PhotoProducerCache.Instance.Return(_producer);                 _producer = null;             }         }          void OnDestroy()         {             TurnOff();         }     } }</p>
<p>// photoProducer.cs  using System.Collections; using System.Collections.Generic; using UnityEngine;  namespace Framework  {     public class PhotoProducer     {         private GameObject _rtContainer;         private GameObject _targetContainer;         private Camera _rtCamera;         private RenderTexture _rt;          public GameObject producerContainer         {             get { return _rtContainer;}         }          public GameObject targetContainer         {             get {return _targetContainer;}         }          public Camera rtCamera         {             get {return _rtCamera;}         }          public RenderTexture renderTexture         {             get {return _rt;}         }          public PhotoProducer(int width,int height,int cullingMask,int rtDepth,RenderTextureFormat rtFormat,int antiAliasing)         {             _rtContainer = new GameObject(“PhotoProducer_“ + PhotoProducerCounter.GetCounter());              _targetContainer = new GameObject(“TargetContainer”);             _targetContainer.transform.SetParent(_rtContainer.transform,false);              _rtContainer.transform.position = PhotoProducerCounter.GenPosition();             GameObject.DontDestroyOnLoad(_rtContainer);              GameObject cameraObj = new GameObject(“Camera”);             cameraObj.transform.SetParent(_rtContainer.transform, false);             this._rtCamera = cameraObj.AddComponent<Camera>();             this._rtCamera.useOcclusionCulling = false;              _rtCamera.enabled = true;             _rtCamera.clearFlags = CameraClearFlags.SolidColor;             _rtCamera.backgroundColor = new Color(0, 0, 0, 0);             _rtCamera.cullingMask = cullingMask;             _rtCamera.targetTexture = _rt;             _rtCamera.farClipPlane = 1000;              _rt = new RenderTexture(width, height,rtDepth,rtFormat);             if(antiAliasing &gt; 0)                 _rt.antiAliasing = antiAliasing;              _rtCamera.targetTexture = _rt;         }          public void Dispose()         {             if (_rtCamera != null) {                 _rtCamera.targetTexture = null;             }             if(_rt != null)             {                 GameObject.Destroy(_rt);                 _rt = null;             }             GameObjectUtil.Destroy(_rtContainer);         }     } }</p>
<p>// photoProducerCache.cs  using System.Collections.Generic; using UnityEngine;  namespace Framework {     /**      *  UI特效公用的RenderTexture缓存 以及 用于绘制的Camera和GameObject      *  RenderTexture的大小  有若干种规格,游戏项目中规划好预定的几种规格规范      *  规格1   1136 640                                    *  规格2   200*200      * */     public class PhotoProducerCache : Singleton<PhotoProducerCache>     {         //一些设置         private int _photoCullingLayer = 0;         private int _photoCullingMask = 0;          private int _rtDepth = 32;         private RenderTextureFormat _rtFormat = RenderTextureFormat.ARGB32;          private int _antiAliasing = 2;         private Material _photoMat;          //每种规格 对应的 缓存RenderTexture列表         private Dictionary&lt;int,List<PhotoProducer>&gt; _cache = new Dictionary&lt;int,List<PhotoProducer>&gt;();         private Dictionary&lt;int,int&gt; _capacityDict = new Dictionary&lt;int, int&gt;();          public void SetAALevel(int aaLevel)         {             this._antiAliasing = aaLevel;         }          public void SetCullingLayer(int mask)         {             _photoCullingLayer = mask;             _photoCullingMask = 1&lt;&lt;_photoCullingLayer;         }          public int GetCullingLayer()         {             return _photoCullingLayer;         }                      public void SetRenderTextureDepth(int depth)         {             _rtDepth = depth;         }          public void SetRenderTextureFormat(RenderTextureFormat format)         {             _rtFormat = format;         }                      public void SetCapacity(int width,int height,int capacity)         {             int key = (width &lt;&lt; 16) + height;             _capacityDict[key] = capacity;         }          public void SetPhotoMaterial(Material mat)         {             _photoMat = mat;         }          public Material GetPhotoMaterial()         {             return _photoMat;         }                      public PhotoProducer Fetch(int width,int height)         {             if(width &lt;= 0 || height &lt;= 0) return null;             int key = (width &lt;&lt; 16) + height;             PhotoProducer producer;             if(_cache.ContainsKey(key))             {                 List<PhotoProducer> producers = _cache[key];                 if(producers.Count &gt; 0)                 {                     producer = producers[producers.Count-1];                     producer.targetContainer.SetActive(true);                     producers.RemoveAt(producers.Count-1);                 }                 else                 {                     producer =  new PhotoProducer(width,height,_photoCullingMask,_rtDepth,_rtFormat,_antiAliasing);                 }             }             else             {                 producer = new PhotoProducer(width,height,_photoCullingMask,_rtDepth,_rtFormat,_antiAliasing);             }             return producer;         }          public void Return(PhotoProducer producer)         {             if(producer == null) return;             RenderTexture rt = producer.renderTexture;             int key = (rt.width &lt;&lt; 16) + rt.height;             int capacity;             _capacityDict.TryGetValue(key,out capacity);              if(capacity &gt; 0)             {                 List<PhotoProducer> producers;                 _cache.TryGetValue(key,out producers);                 if(producers == null)                 {                     producers = new List<PhotoProducer>();                     _cache[key] = producers;                 }                  if(producers.Count &lt; capacity)                   {                     if (producer.producerContainer) {                         producer.producerContainer.SetActive(false);                     }                     producers.Add(producer);                 }                 else //剩余容量不够了，销毁掉                 {                     producer.Dispose();                 }             }             else //不需要缓存的             {                 producer.Dispose();             }         }            } }</p>
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;游戏项目中一般会用到一些优化手段，大部分优化的是资源的大小对内存的影响，比如项目中特效的加载会拥有两个类：photoFactoryEffect和photoMutilEffect&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;photoFact
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unity" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E7%89%B9%E6%95%88/"/>
    
    
      <category term="特效" scheme="https://laoleo.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>RenderTexture特效系统实现原理</title>
    <link href="https://laoleo.github.io/2021/01/20/RenderTexture%E7%89%B9%E6%95%88%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://laoleo.github.io/2021/01/20/RenderTexture特效系统实现原理/</id>
    <published>2021-01-19T16:00:00.000Z</published>
    <updated>2022-12-07T13:34:13.149Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>
<h1 id="RenderTexture特效系统实现原理"><a href="#RenderTexture特效系统实现原理" class="headerlink" title="RenderTexture特效系统实现原理"></a>RenderTexture特效系统实现原理</h1><h2 id="一、RenderTexture阐述"><a href="#一、RenderTexture阐述" class="headerlink" title="一、RenderTexture阐述"></a>一、RenderTexture阐述</h2><p>食物语中的显示的特效一般是使用RenderTexture结合摄像机拍摄3D物体实现的，实际上游戏中显示的是一张加载好的RT。</p>
<p>什么是RT？为啥RT可以渲染一张动态的图片？</p>
<p>RT是一种特殊的Texture，可以在运行时实现更新内容。网上有句话可以概括：将一个FBO链接到server-side的texture对象上。通俗一点就是将渲染结果应用到gpu上的texture对象上，而texture对象就是游戏中的一张贴图，渲染结果（FBO的数据）可以动态变化，那么贴图的内容也跟着动态变化。</p>
<p>FBO全称：FrameBufferObject，gpu上的一块buffer区域，用来存储渲染结果。一般有个默认的FBO直接连接显示器窗口区域，其他的FBO存储渲染结果供需要时使用，正是这时候，RT作为一块渲染区域应用这些FBO。</p>
<p>server-side：cpu加载贴图资源到内存，叫做client-side；cpu将资源从内存拷贝到gpu中，叫做发送到server-side。</p>
<p>为什么特效需要用RT应用到项目中，而不直接加载呢？</p>
<p>关键的原因是项目中一般在UI上挂特效，特效资源的渲染层跟UI不属于同一个渲染层级，所以总是在UI资源之前或之后，没办法在两个UI资源之间，让特效显示在最上层的话，那么就会挡住比如断线重连这类层级优先级最高的UI。</p>
<p>所以要利用RT渲染特效，作为一个UI资源加载进来。</p>
<h2 id="二、RT特效系统设计原理"><a href="#二、RT特效系统设计原理" class="headerlink" title="二、RT特效系统设计原理"></a>二、RT特效系统设计原理</h2><p>怎样实现RT特效？</p>
<p>很简单就是创建一个RenderTexture对象，赋值给camera的targetTextrue属性，同时赋值给RawImage对象的texture属性。这就相当于camera将渲染结果（特效的表现）写入到了RenderTexture对象，RawImage对象作为一个显示窗口区域，连接到RenderTexture对象存储数据的FBO。</p>
<p>着点于项目上，RT特效系统是如何设计的，这么设计的原因有是什么呢？先看以下系统关系图：</p>
<img src="/2021/01/20/RenderTexture%E7%89%B9%E6%95%88%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/image.png" class="">
<p>图中清晰的表达了类之间数据流向，关键的就是传递RT和特效实例，各类发挥的作用：</p>
<ol>
<li>PhotoProducer负责创建RT、摄像机和特效实例的容器TargetContainer，相当于一块特效的渲染场景，而且这个渲染场景跟UI不是同一个渲染层，另外负责把RT传递给PhotoBase的RawImage组件上。</li>
<li>PhotoProducerCache作为对象池，管理PhotoProducer的分配和回收。</li>
<li>PhotoBase就是作为承载RT的容器，显示在UI上。</li>
<li>PhotoMultiEffect负责通过url加载特效资源，并将特效资源实例传递到Pruducer中的TargetContainer容器。</li>
</ol>
<p>另外这些类通过turnOn和turnOff方法控制特效的显示和隐藏。</p>
<ul>
<li>turnOn方法：将Effect Inst加到TargetContainer节点下，将RT跟Camera和RawImage连接起来。</li>
<li>TurnOff方法：将RawImage置为不可用enable为false，将Effect Inst移出TargetContainer，并且将ProducerContainer置为不可见，归还Producer到对象池以便供其他特效使用。</li>
</ul>
<p>还有一点，PhotoProducerCache的主要优化手段是将RT缓存起来，用RT的规格（宽高）作为索引来复用RT。项目中规定了RT的几种规则：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--最大规格RT尺寸(不能再大了) 1560 * 720</span></span><br><span class="line">PhotoUtil.MaxRTWidth = <span class="number">1560</span></span><br><span class="line">PhotoUtil.MaxRTHeight = <span class="number">720</span></span><br><span class="line"><span class="comment">--大规格RT尺寸 1280 * 720</span></span><br><span class="line">PhotoUtil.RTWidth = <span class="number">1280</span></span><br><span class="line">PhotoUtil.RTHeight = <span class="number">720</span></span><br><span class="line"><span class="comment">--中等规格RT尺寸 512 * 288</span></span><br><span class="line">PhotoUtil.PartRTWidth = <span class="number">512</span></span><br><span class="line">PhotoUtil.PartRTHeight = <span class="number">288</span></span><br><span class="line"><span class="comment">--小规格RT尺寸 256 * 144</span></span><br><span class="line">PhotoUtil.SmallRTWidth = <span class="number">256</span></span><br><span class="line">PhotoUtil.SmallRTHeight = <span class="number">144</span></span><br></pre></td></tr></table></figure>
<p>这样做应该是为限制RT规则来方便复用吧，而且面对各种规则的RT特效复用可能会出现特效裁边这种问题。</p>
<p>RT特效系统中还处理了一种情况：显示多个同一类特效。</p>
<p>当然RT肯定是同一张，但是需要创建多个PhotoMultiEffect的实例，进而实例化多个特效资源实例，这样就浪费资源了，创建多个特效实例可以省去，我们需要的是多个RT的承载体，也就是多个挂有RawImage组件的GameObject。</p>
<p>所以就有PhotoEffectFactory类，负责管理同一类特效的多处显示情况。</p>
<img src="/2021/01/20/RenderTexture%E7%89%B9%E6%95%88%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/image_1.png" class="">
]]></content>
    
    <summary type="html">
    
      &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;RenderTexture特效系统实现原理&quot;&gt;&lt;a href=&quot;#RenderTexture特效系统实现原理&quot; class=&quot;headerlink&quot; title=&quot;RenderTexture特效系统实现原理&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="Unity游戏开发" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unity" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/"/>
    
      <category term="特效" scheme="https://laoleo.github.io/categories/Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unity/%E7%89%B9%E6%95%88/"/>
    
    
      <category term="特效" scheme="https://laoleo.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
      <category term="RT" scheme="https://laoleo.github.io/tags/RT/"/>
    
      <category term="RenderTexture" scheme="https://laoleo.github.io/tags/RenderTexture/"/>
    
  </entry>
  
</feed>
